var __extends = (this && this.__extends) || (function () {
	var extendStatics = function (d, b) {
		extendStatics = Object.setPrototypeOf ||
			({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
		return extendStatics(d, b);
	};
	return function (d, b) {
		if (typeof b !== "function" && b !== null)
			throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
		extendStatics(d, b);
		function __() { this.constructor = d; }
		d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	return new (P || (P = Promise))(function (resolve, reject) {
		function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
		function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
		function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
var __generator = (this && this.__generator) || function (thisArg, body) {
	var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	function verb(n) { return function (v) { return step([n, v]); }; }
	function step(op) {
		if (f) throw new TypeError("Generator is already executing.");
		while (_) try {
			if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
			if (y = 0, t) op = [op[0] & 2, t.value];
			switch (op[0]) {
				case 0: case 1: t = op; break;
				case 4: _.label++; return { value: op[1], done: false };
				case 5: _.label++; y = op[1]; op = [0]; continue;
				case 7: op = _.ops.pop(); _.trys.pop(); continue;
				default:
					if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
					if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
					if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
					if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
					if (t[2]) _.ops.pop();
					_.trys.pop(); continue;
			}
			op = body.call(thisArg, _);
		} catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
		if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	}
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
	if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
		if (ar || !(i in from)) {
			if (!ar) ar = Array.prototype.slice.call(from, 0, i);
			ar[i] = from[i];
		}
	}
	return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
	return (mod && mod.__esModule) ? mod : { "default": mod };
};
define(["require", "exports", "./snabbdom", "./public/public"], function (require, exports, snabbdom_1, public_1) {
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Config = void 0;
	public_1 = __importDefault(public_1);
	var Config = (function (_super) {
		__extends(Config, _super);
		function Config() {
			var _this = _super.call(this) || this;
			_this.Info = {};
			_this.configInfo = {};
			_this.formInfo = {};
			_this.alertModuleList = [];
			_this.taskTypeList = {};
			_this.alertListModule = {};
			_this.disabledOption = [
				'site_endtime',
				'ssh_login',
				'ssh_login_error',
				'panel_login',
				'panel_pwd_endtime',
				'panel_safe_push',
				'panel_update',
			];
			_this.alertInitInfo = {
				tid: '',
				type: '',
				cycle: 0,
				count: 0,
				interval: 600,
				module: '',
				title: '',
				push_count: 0,
				project: '',
			};
			_this.verifyParam = {};
			_this.apiInfo = {
				getConfig: ['config/get_config', '获取配置信息'],
				getCheckTwoStep: ['config/check_two_step', '获取动态口令认证状态'],
				getPasswordConfig: ['config/get_password_config', '获取密码复杂度验证状态'],
				closePanel: ['config/ClosePanel', '关闭面板'],
				setIpv6Status: ['config/set_ipv6_status', '设置IPv6状态'],
				getToken: ['config/get_token', '获取API配置'],
				setToken: ['config/set_token', '设置API配置'],
				setLocal: ['config/set_local', '设置离线模式'],
				setDebug: ['config/set_debug', '设置开发者模式'],
				setWorkorder: ['config/show_workorder', '设置在线客服'],
				setImprovement: ['config/set_improvement', '设置用户体验改进计划状态'],
				setPanelConfig: ['config/setPanel', '设置面板配置'],
				setSyncDate: ['config/syncDate', '同步服务器时间'],
				setUserName: ['config/setUsername', '设置面板用户名'],
				setPassword: ['config/setPassword', '设置面板密码'],
				getPanelSsl: ['config/GetPanelSSL', '获取自定义证书信息'],
				savePanelSsl: ['config/SavePanelSSL', '保存自定义证书信息'],
				getCertSource: ['config/get_cert_source', '获取面板证书配置'],
				setPanelSsl: ['config/SetPanelSSL', '设置面板证书配置'],
				setBasicAuth: ['config/set_basic_auth', '设置BasicAuth基础认证'],
				setTwoStepAuth: ['config/set_two_step_auth', '设置动态口令'],
				getQrcodeData: ['config/get_qrcode_data', '获取动态口令数据'],
				getTwoStepKey: ['config/get_key', '获取动态口令认证状态'],
				getSslVerify: ['config/get_ssl_verify', '获取访问设备验证状态'],
				setSslVerify: ['config/set_ssl_verify', '设置访问设备验证状态'],
				setPasswordSafe: ['config/set_password_safe', '设置密码复杂度'],
				setAdminPath: ['config/set_admin_path', '设置安全地址'],
				setPawExpire: ['config/set_password_expire', '设置密码过期时间'],
				getMenuList: ['config/get_menu_list', '获取面板菜单列表'],
				setHideMenuList: ['config/set_hide_menu_list', '设置面板菜单栏目显示状态'],
				getMessageChannel: ['config/get_msg_configs', '获取告警通道状态'],
				setNotAuthStatus: ['config/set_not_auth_status', '设置未认证响应状态'],
				getTempAuthList: ['config/get_temp_login', '获取临时授权列表'],
				setTempAuthLink: ['config/set_temp_login', '创建临时授权链接'],
				removeTempAuthLink: ['config/remove_temp_login', '删除临时授权链接'],
				clearTempAuth: ['config/clear_temp_login', '强制用户登出'],
				getTempOperationLogs: ['config/get_temp_login_logs', '获取操作日志'],
				setRequestType: ['config/set_request_type', '设置云端请求方式'],
				setRequestIpType: ['config/set_request_iptype', '设置云端请求线路'],
				getNodeConfig: ['config/get_node_config', '获取节点配置'],
				setNodeConfig: ['config/set_node_config', '设置启用节点'],
				setMsgConfigmail: ['config/set_msg_config&name=mail', '设置收件者邮箱'],
				getPanelSafe: ['push/get_push_config', '获取面板安全状态'],
				setPanelSafe: ['push/set_push_config', '设置面板安全告警'],
				setRegionConfig: ['config/set_limit_area', '设置屏蔽地区'],
        getRegionConfig: ['config/get_limit_area', '获取屏蔽地区'],
			};
			_this.init();
			return _this;
		}
		Config.prototype.init = function () {
			return __awaiter(this, void 0, void 0, function () {
				return __generator(this, function (_a) {
					this.$apiInit(this.apiInfo);
					this.renderConfigData();
					this.eventBind();
					this.reanderBanRegion(0);
					return [2];
				});
			});
		};
		Config.prototype.setDeveloperView = function () {
			return __awaiter(this, void 0, void 0, function () {
				var _this = this;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0: return [4, this.$open({
							title: '开启开发者模式',
							area: ['420px', '340px'],
							btn: ['提交', '取消'],
							content: {
								data: { agreement: false },
								template: function () {
									return ((0, snabbdom_1.jsx)("div", { class: this.$class('bt-form pd25') },
										this.$warningTitle('风险操作,此功能普通用户别开启!'),
										this.$ul({ className: 'explainDescribeList pd15' }, [['仅第三方开发者开发使用，普通用户请勿开启；', 'red'], ['请不要在生产环境开启，这可能增加服务器安全风险；'], ['开启开发者模式可能会占用大量内存；']]),
										this.$learnMore({
											title: '我已了经解详情，并愿意承担风险，开启开发模式',
											model: 'agreement',
											id: 'checkDevelopers',
										})));
								},
							},
							yes: function (config) { return __awaiter(_this, void 0, void 0, function () {
								var close, vm, rdata, _a;
								return __generator(this, function (_b) {
									switch (_b.label) {
										case 0:
											close = config.close, vm = config.vm;
											if (!vm.agreement)
												return [2, this.$tips({
													msg: '请勾选，已了解风险选项',
													el: '#checkDevelopers',
												})];
											return [4, this.$request('setDebug')];
										case 1:
											rdata = _b.sent();
											_a = rdata.status && close();
											if (!_a) return [3, 3];
											return [4, this.$refreshBrowser()];
										case 2:
											_a = (_b.sent());
											_b.label = 3;
										case 3:
											_a;
											return [2];
									}
								});
							}); },
						})];
						case 1:
							_a.sent();
							return [2];
					}
				});
			});
		};
		Config.prototype.setPanelApiView = function (checked) {
			return __awaiter(this, void 0, void 0, function () {
				var rdata, that, error_1;
				var _this = this;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0: return [4, this.$request('getToken')];
						case 1:
							rdata = _a.sent(), that = this;
							_a.label = 2;
						case 2:
							_a.trys.push([2, 4, , 5]);
							return [4, this.$open({
								area: ['500px', '420px'],
								title: '配置面板API',
								content: {
									data: {
										api: typeof checked === 'undefined' ? rdata.open : checked,
										panelTokenValue: rdata.token,
										apiLimitAddr: rdata.limit_addr,
									},
									template: function () {
										var lineWidth = '90px', helpHref = 'https://www.bt.cn/bbs/thread-20376-1-1.html';
										return ((0, snabbdom_1.jsx)("div", { class: this.$class('bt-form pd25') },
											this.$line({ title: 'API接口', width: lineWidth }, this.$switch({
												model: 'api',
												change: this.setPanelApi.bind(this),
											})),
											this.$line({ title: '接口密钥', width: lineWidth }, this.$box(this.$input({
												model: 'panelTokenValue',
												disabled: true,
												style: { width: '310px' },
											}), this.$button({
												size: 'xs',
												click: this.resetInterface.bind(this),
												style: 'margin-left:-50px;',
												title: '重置',
											}))),
											this.$line({
												title: ((0, snabbdom_1.jsx)("span", null,
													"IP\u767D\u540D\u5355",
													(0, snabbdom_1.jsx)("br", null),
													"(\u6BCF\u884C1\u4E2A)")),
												width: lineWidth,
												style: 'overflow: initial;height:20px;line-height:20px;',
											}, this.$textarea({
												model: 'apiLimitAddr',
												style: 'width: 310px;height:80px;line-height: 20px;padding: 5px 8px;',
											})),
											this.$line({ title: '', width: lineWidth }, this.$button({
												size: 'sm',
												click: this.savePanelApiIp.bind(this),
												title: '保存',
											})),
											this.$ul({ style: { marginLeft: '25px' } }, [
												['开启API后，必需在IP白名单列表中的IP才能访问面板API接口'],
												['请不要在生产环境开启，这可能增加服务器安全风险；', 'red'],
												[
													(0, snabbdom_1.jsx)("span", null,
														"API\u63A5\u53E3\u6587\u6863\u5728\u8FD9\u91CC\uFF1A",
														this.$link({ title: helpHref, href: helpHref })),
												],
											])));
									},
									methods: {
										setPanelApi: function () {
											return __awaiter(this, void 0, void 0, function () {
												var apiEl;
												return __generator(this, function (_a) {
													switch (_a.label) {
														case 0: return [4, that.$request('setToken', { t_type: 2 })];
														case 1:
															_a.sent();
															if (!this.api) {
																apiEl = document.querySelector('#apiInterface');
																apiEl.checked = this.api;
															}
															return [2];
													}
												});
											});
										},
										resetInterface: function () {
											return __awaiter(this, void 0, void 0, function () {
												var rdata;
												return __generator(this, function (_a) {
													switch (_a.label) {
														case 0: return [4, that.$confirm({
															title: '重置密钥',
															msg: '您确定要重置当前密钥吗？<br><span style="color: red; ">重置密钥后，已关联密钥产品，将失效，请重新添加新密钥至产品。</span>',
														})];
														case 1:
															_a.sent();
															return [4, that.$request('setToken', { t_type: 1 }, false)];
														case 2:
															rdata = _a.sent();
															that.$msg({
																msg: '接口密钥已生成，重置密钥后，已关联密钥产品，将失效，请重新添加新密钥至产品。',
																time: 0,
																closeBtn: 2,
															});
															this.panelTokenValue = rdata.msg;
															return [2];
													}
												});
											});
										},
										savePanelApiIp: function () {
											return __awaiter(this, void 0, void 0, function () {
												return __generator(this, function (_a) {
													switch (_a.label) {
														case 0: return [4, that.$request('setToken', {
															t_type: 3,
															limit_addr: this.apiLimitAddr,
														})];
														case 1:
															_a.sent();
															return [2];
													}
												});
											});
										},
									},
								},
								success: function (layers, indexs, vm) { return __awaiter(_this, void 0, void 0, function () {
									return __generator(this, function (_a) {
										switch (_a.label) {
											case 0:
												if (!(typeof checked === 'boolean' && checked)) return [3, 2];
												return [4, that.$request('setToken', { t_type: 2 })];
											case 1:
												_a.sent();
												_a.label = 2;
											case 2: return [2];
										}
									});
								}); },
							})];
						case 3:
							_a.sent();
							return [3, 5];
						case 4:
							error_1 = _a.sent();
							return [3, 5];
						case 5: return [2];
					}
				});
			});
		};
		Config.prototype.setPanelUserView = function () {
			return __awaiter(this, void 0, void 0, function () {
				var error_2;
				var _this = this;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0:
							_a.trys.push([0, 2, , 3]);
							return [4, this.$open({
								title: '修改面板用户名',
								area: ['380px', '238px'],
								btn: ['提交', '取消'],
								content: {
									data: { username1: sessionInfo.username, username2: '' },
									template: function () {
										var lineWidth = '100px', inputWidth = '210px';
										return ((0, snabbdom_1.jsx)("div", { class: this.$class('bt-form pd25') },
												this.$line({ title: '用户名', width: lineWidth }, this.$input({
														model: 'username1',
														width: inputWidth
												})),
												this.$line({ title: '重复', width: lineWidth }, this.$input({
														model: 'username2',
														width: inputWidth
												}))));
								},
								},
								yes: function (config) { return __awaiter(_this, void 0, void 0, function () {
									var close, vm, username1, username2, weakCipher, rdata;
									return __generator(this, function (_a) {
										switch (_a.label) {
											case 0:
												close = config.close, vm = config.vm;
												username1 = vm.username1, username2 = vm.username2;
												weakCipher = ['admin', 'root', 'admin123', '123456'];
												return [4, this.$verifySubmitList([
													[username1 !== username2, '两次输入的用户名不一致'],
													[username1.length <= 3, '用户名长度必须大于3位'],
													[weakCipher.indexOf(username1) > -1, "\u7528\u6237\u540D\u5305\u542B\u5E38\u7528\u540D\u79F0[".concat(username1, "]")],
												])];
											case 1:
												_a.sent();
												username1 = encodeURIComponent(username1);
												username2 = encodeURIComponent(username2);
												return [4, this.$request('setUserName', {
													username1: rsa.encrypt_public(username1),
													username2: rsa.encrypt_public(username2),
												})];
											case 2:
												rdata = _a.sent();
												rdata.status && close() && this.$refreshBrowser('/login?dologin=True');
												return [2];
										}
									});
								}); },
							})];
						case 1:
							_a.sent();
							return [3, 3];
						case 2:
							error_2 = _a.sent();
							return [3, 3];
						case 3: return [2];
					}
				});
			});
		};
		Config.prototype.setPanelPawView = function () {
			return __awaiter(this, void 0, void 0, function () {
				var that_1, error_3;
				var _this = this;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0:
							_a.trys.push([0, 2, , 3]);
							that_1 = this;
							return [4, this.$open({
								title: '修改面板密码',
								area: ['380px', '238px'],
								btn: ['提交', '取消'],
								content: {
									data: { password1: '', password2: '' },
									template: function () {
										var lineWidth = '75px', inputWidth = '210px';
										return ((0, snabbdom_1.jsx)("div", { class: { 'bt-form': true, pd25: true } },
											this.$line({ title: '密码', width: lineWidth }, this.$box(this.$input({ model: 'password1', width: inputWidth }), this.$icon({
												type: 'repeat',
												click: this.showPaw.bind(this),
												class: 'ml5',
											}))),
											this.$line({ title: '重复', width: lineWidth }, this.$input({
												model: 'password2',
												width: inputWidth
											}))));
									},
									methods: {
										showPaw: function () {
											this.password1 = that_1.$getRandom(10);
											this.password2 = this.password1;
										},
									},
								},
								yes: function (config) { return __awaiter(_this, void 0, void 0, function () {
									var close, vm, password1, password2, weakCipher, rdata;
									return __generator(this, function (_a) {
										switch (_a.label) {
											case 0:
												close = config.close, vm = config.vm;
												password1 = vm.password1, password2 = vm.password2;
												weakCipher = this.$checkWeakCipher(password1);
												return [4, this.$verifySubmitList([
													[password1 !== password2, '两次输入的密码不一致'],
													[password1.length <= 5, '密码长度必须大于5位'],
													[!weakCipher.status, lan.bt.pass_err + weakCipher.msg],
												])];
											case 1:
												_a.sent();
												password1 = encodeURIComponent(password1);
												password2 = encodeURIComponent(password2);
												return [4, this.$request('setPassword', {
													password1: rsa.encrypt_public(password1),
													password2: rsa.encrypt_public(password2),
												})];
											case 2:
												rdata = _a.sent();
												rdata.status && close() && this.$refreshBrowser('/login?dologin=True');
												return [2];
										}
									});
								}); },
							})];
						case 1:
							_a.sent();
							return [3, 3];
						case 2:
							error_3 = _a.sent();
							return [3, 3];
						case 3: return [2];
					}
				});
			});
		};
		Config.prototype.setPanelSslView = function () {
			return __awaiter(this, void 0, void 0, function () {
				var that, certSource, _a, certPem, privateKey, download_root;
				var _this = this;
				return __generator(this, function (_b) {
					switch (_b.label) {
						case 0:
							that = this;
							return [4, this.$request('getCertSource')];
						case 1:
							certSource = _b.sent();
							return [4, this.$request('getPanelSsl')];
						case 2:
							_a = _b.sent(), certPem = _a.certPem, privateKey = _a.privateKey, download_root = _a.download_root;
							return [4, this.$open({
								title: '开启SSL证书',
								area: ['602px', '575px'],
								btn: ['开启SSL证书访问'],
								skin: 'panel-ssl',
								content: {
									data: {
										cert_type: 1,
										email: certSource.email || '',
										certPem: !download_root ? certPem : '',
										privateKey: !download_root ? privateKey : '',
										agreement: false,
									},
									template: function () {
										var lineWidth = '78px', inputWidth = '280px';
										return ((0, snabbdom_1.jsx)("div", { class: this.$class('bt-form pd40 ssl-con-box') },
											this.$warningTitle('【开启SSL证书】保护面板访问安全'),
											this.$ul({ className: 'explainDescribeList pd15' }, [['自签证书访问步骤：'], ['1. 部署SSL证书'], ['2. 浏览器地址栏修改为https://访问'], ['3. 如提醒风险（正常现象）点击【高级】或【详情】如下图：'], ['4.【继续访问】或【接收风险并继续】'], [
                                                        (0, snabbdom_1.jsx)("img", null)
                                                    ]]),
											(0, snabbdom_1.jsx)("div", { class: { pt10: true } },
												this.$line({ title: '类型', width: lineWidth }, this.$select({
													model: 'cert_type',
													width: inputWidth,
													options: [
														{ label: '自签证书 (推荐，浏览器会提示不安全。可忽略，请放心开启)', value: 1 },
														{ label: "Let's Encrypt", value: 2 },
														{ label: '其他证书', value: 0 },
													],
													change: this.changeCertType.bind(this),
												})),
												this.$line({
													title: '邮箱',
													width: lineWidth,
													hide: !(this.cert_type == 2),
												}, this.$input({ model: 'email', width: inputWidth })),
												this.$line({
													title: '密钥(KEY)',
													width: lineWidth,
													hide: !(this.cert_type == 0),
												}, this.$textarea({
													model: 'privateKey',
													width: inputWidth,
													height: '80px',
													style: 'line-height: 16px;padding: 5px 8px;',
												})),
												this.$line({
													title: '证书(PEM)',
													width: lineWidth,
													hide: !(this.cert_type == 0),
												}, this.$textarea({
													model: 'certPem',
													width: inputWidth,
													height: '80px',
													style: 'line-height: 16px;padding: 5px 8px;',
												})),
												this.$ul({ className: 'sslSafeTips' }, [[
													(0, snabbdom_1.jsx)("span", null,
															"\u5F00\u542F\u540E\u5BFC\u81F4\u9762\u677F\u4E0D\u80FD\u8BBF\u95EE\uFF0C\u53EF\u4EE5\u70B9\u51FB\u67E5\u770B",
															this.$link({
																	title: '解决方法',
																	href: 'https://www.bt.cn/bbs/thread-117246-1-1.html'
															}))
											], ['自签证书不被浏览器信任，显示不安全是正常现象']]))));
									},
									methods: {
										changeCertType: function (ev) {
											if (!bt.config.web.setup && !bt.config.web.status) {
												this.cert_type = 1;
												if (bt.config.web.type === 'openlitespeed') {
													return that.$msg({
														icon: 2,
														msg: "暂不支持OpenLiteSpeed，请安装Nginx或者Apache后再操作",
														time: 3000,
													});
												}
												return that.$msg({
													icon: 2,
													msg: "未安装任意Web服务，请安装Nginx或者Apache后再操作",
													time: 3000,
												});
											}
											if (!that.configInfo.domain && this.cert_type == 2) {
												this.cert_type = 1;
												return that.$msg({
													icon: 2,
													msg: "当前面板未绑定域名，无法申请Let's Encrypt证书",
													time: 3000,
												});
											}
											this.cert_type = Number($(ev.target).val());
										},
									},
								},
								success: function (layers) { return __awaiter(_this, void 0, void 0, function () {
									return __generator(this, function (_a) {
										layers[0].style.height = 'auto';
										layers[0].querySelector('.layui-layer-content').style.height = 'auto';
										$('.panel-ssl .explainDescribeList img').attr('title', '点击查看完整图片').attr('src', '/static/images/config/open_ssl.png').css('width', '218px');
										$('.panel-ssl .explainDescribeList img').click(function () {
											var src = $(this).attr('src');
											layer.open({
												type: 1,
												title: false,
												closeBtn: 1,
												area: ['952px', '578px'],
												shadeClose: true,
												content: '<img src="' + src + '" style="width: 100%;">'
											});
										});
										return [2];
									});
								}); },
								yes: function (config) { return __awaiter(_this, void 0, void 0, function () {
									var close, vm, cert_type, email, privateKey, certPem, param, rdata;
									return __generator(this, function (_a) {
										switch (_a.label) {
											case 0:
												close = config.close, vm = config.vm;
												cert_type = vm.cert_type, email = vm.email, privateKey = vm.privateKey, certPem = vm.certPem;
												return [4, this.$verifySubmitList([
													[cert_type == 0 && (!certPem || !privateKey), '请填写完整证书信息'],
													[cert_type == 2 && !this.$checkEmail(email), '请输入正确的邮箱格式'],
												])];
											case 1:
												_a.sent();
												param = { cert_type: cert_type };
												if (param.cert_type == 0) {
													param.privateKey = privateKey;
													param.certPem = certPem;
												}
												else if (param.cert_type == 2) {
													param.email = email;
												}
												return [4, this.$request('setPanelSsl', param)];
											case 2:
												rdata = _a.sent();
												if (!rdata.status) {
													$('input[name="ssl"]').prop('checked', false);
													close();
													return [2];
												}
												close() && this.sslSelfJumpView();
												return [2];
										}
									});
								}); },
								cancel: function () {
									$('input[name="ssl"]').prop('checked', false);
								},
								btn2: function () {
									$('input[name="ssl"]').prop('checked', false);
								},
							})];
						case 3:
							_b.sent();
							return [2];
					}
				});
			});
		};
		Config.prototype.sslSelfJumpView = function () {
			return __awaiter(this, void 0, void 0, function () {
				var that, refreshUrl;
				var _this = this;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0:
							that = this, refreshUrl = 'https://' + location.host + location.pathname;
							sessionStorage.clear(); // 清除sessionStorage
							localStorage.clear(); // 清除localStorage
							// 清除所有cookie
							const keys = document.cookie.match(/[^ =;]+(?=\=)/g);
							if (keys) {
								for (let i = keys.length; i--;) {
									document.cookie = keys[i] + '=0;expires=' + new Date(0).toUTCString();
								}
							}
							return [4, this.$open({
								title: '跳转提醒',
								area: ['450px', '250px'],
								btn: false,
								content: {
									data: {
										refreshUrl: refreshUrl
									},
									template: function () {
										return ((0, snabbdom_1.jsx)("div", { class: this.$class('ssl-jump-view pd20 f14'), style: this.$style('line-height:35px;') },
													(0, snabbdom_1.jsx)("div", { style: this.$style('font-size:12px;') }, this.$ul({ className: 'explainDescribeList' }, [[
																	(0, snabbdom_1.jsx)("span", null,
																			"\u5F00\u542F\u540E\u5BFC\u81F4\u9762\u677F\u4E0D\u80FD\u8BBF\u95EE\uFF0C\u53EF\u4EE5\u70B9\u51FB\u67E5\u770B",
																			this.$link({
																					title: '解决方法',
																					href: 'https://www.bt.cn/bbs/thread-117246-1-1.html'
																			}))
															], ['自签证书不被浏览器信任，显示不安全是正常现象']])),
													(0, snabbdom_1.jsx)("div", { class: this.$class('ssl-jump-time') },
												"\u5373\u5C06\u8DF3\u8F6C\u5230HTTPS\u8FDB\u884C\u8BBF\u95EE\uFF0C\u5012\u8BA1\u65F6",
												(0, snabbdom_1.jsx)("span", { class: this.$class('jump-time-num'), style: this.$style('color:red;') }, "15"),
												"\u79D2\uFF1A",
												(0, snabbdom_1.jsx)("span", { class: this.$class('ml20 btlink ssl-jump-btn') }, "\u7ACB\u5373\u8DF3\u8F6C")),
											this.$input({
												model: 'refreshUrl',
												disabled: true,
												width: '360px',
												style: 'font-size: 13px;'
											}),
											(0, snabbdom_1.jsx)("button", { props: { id: 'copyServerUrl' }, class: this.$class('btn btn-success btn-xs'), style: { height: '32px', 'border-radius': '0' } }, "\u590D\u5236")));
									},
									mounted: function () {
										return __awaiter(this, void 0, void 0, function () {
											var param, copyRoot, time, timer;
											return __generator(this, function (_a) {
												switch (_a.label) {
													case 0: return [4, that.$require('clipboard')];
													case 1:
														param = _a.sent();
														document.getElementById('copyServerUrl').setAttribute('data-clipboard-text', refreshUrl);
														copyRoot = new param.clipboard('#copyServerUrl');
														copyRoot.on('success', function (e) {
															that.$msg('复制成功');
														});
														time = 15;
														timer = setInterval(function () {
															time--;
															if (time <= 0) {
																clearInterval(timer);
																that.$load('正在跳转中，请稍侯...');
																that.$refreshBrowser(refreshUrl, 3000);
																return;
															}
															$('.ssl-jump-time').find('.jump-time-num').text(time);
														}, 1000);
														return [2];
												}
											});
										});
									},
								},
								success: function () {
									$('.ssl-jump-btn').click(function () {
										that.$load('正在跳转中，请稍侯...');
										_this.$refreshBrowser(refreshUrl, 3000);
									});
								}
							})];
						case 1:
							_a.sent();
							return [2];
					}
				});
			});
		};
		Config.prototype.setPanelSslConfigView = function () {
			return __awaiter(this, void 0, void 0, function () {
				var that, _a, certPem, privateKey, download_root_1, info_1, root_password_1, error_4;
				return __generator(this, function (_b) {
					switch (_b.label) {
						case 0:
							that = this;
							_b.label = 1;
						case 1:
							_b.trys.push([1, 4, , 5]);
							return [4, this.$request('getPanelSsl')];
						case 2:
							_a = _b.sent(), certPem = _a.certPem, privateKey = _a.privateKey, download_root_1 = _a.download_root, info_1 = _a.info, root_password_1 = _a.root_password;
							info_1 = info_1 ? info_1 : {};
							return [4, this.$open({
								title: '自定义面板证书',
								area: ['700px', '640px'],
								content: {
									data: { certPem: certPem, privateKey: privateKey, panel_ssl: this.configInfo.ssl },
									template: function () {
										if (info_1.dns.length == 0 && bt.check_ip(info_1.issuer)) {
											info_1.dns = [info_1.issuer];
										}
										return ((0, snabbdom_1.jsx)("div", { class: this.$class('bt-form pd25') },
											(0, snabbdom_1.jsx)("div", { class: this.$class('alert alert-success') },
												(0, snabbdom_1.jsx)("div", { style: { display: 'inline-block', 'margin-right': '30px' } },
													"\u8BA4\u8BC1\u57DF\u540D\uFF1A",
													(0, snabbdom_1.jsx)("span", { style: { 'font-weight': '700' } }, info_1.dns ? info_1.dns.join('、') : '')),
												(0, snabbdom_1.jsx)("div", { style: { display: 'inline-block', 'margin-right': '30px' } },
													"\u8BC1\u4E66\u54C1\u724C\uFF1A",
													(0, snabbdom_1.jsx)("span", { style: { 'font-weight': '700' } }, info_1.issuer)),
												(0, snabbdom_1.jsx)("div", { style: { display: 'inline-block', 'margin-right': '30px' } },
													"\u5230\u671F\u65F6\u95F4\uFF1A",
													(0, snabbdom_1.jsx)("span", { style: { 'font-weight': '700' } }, info_1.notAfter))),
											(0, snabbdom_1.jsx)("div", { class: { hide: !download_root_1, pt10: true }, style: { clear: 'both' } },
												(0, snabbdom_1.jsx)("span", { style: { 'margin-right': '5px' } }, "\u6E29\u99A8\u63D0\u793A\uFF1A\u5F53\u524D\u8BC1\u4E66\u4E3A\u81EA\u7B7E\u8BC1\u4E66\uFF0C\u9700\u8981\u5B89\u88C5\u672C\u5730\u6839\u8BC1\u4E66\uFF0C"),
												(0, snabbdom_1.jsx)("a", { props: {
														href: '/download?filename=/www/server/panel/ssl/baota_root.pfx',
														target: '_blank',
													}, class: this.$class('btn btn-success btn-xs mr10') }, "\u4E0B\u8F7D\u6839\u8BC1\u4E66"),
												(0, snabbdom_1.jsx)("span", null,
													"\u8BC1\u4E66\u5BC6\u7801\uFF1A",
													(0, snabbdom_1.jsx)("input", { props: { type: 'text', value: root_password_1 }, style: { height: '25px', 'line-height': '25px' }, class: { 'bt-input-text': true } }),
													(0, snabbdom_1.jsx)("button", { props: { id: 'copyRootPassword' }, class: this.$class('btn btn-success btn-xs'), style: { height: '25px', 'border-radius': '0' } }, "\u590D\u5236"))),
											this.$line({ title: '面板SSL', width: '65px' }, this.$box(this.$switch({
												model: 'panel_ssl',
												change: this.setPanelSsl.bind(this),
											}), this.$link({
												title: '如何开启证书？',
												style: 'position: absolute;left: 50px;top: 8px;',
												href: 'http://www.bt.cn/bbs/thread-105443-1-1.html',
											}))),
											(0, snabbdom_1.jsx)("div", { class: this.$class('myKeyCon ptb15') },
												(0, snabbdom_1.jsx)("div", { class: this.$class('ssl-con-key pull-left mr20'), style: { width: '48%' } },
													"\u5BC6\u94A5(KEY)",
													(0, snabbdom_1.jsx)("br", null),
													this.$textarea({ model: 'privateKey' })),
												(0, snabbdom_1.jsx)("div", { class: this.$class('ssl-con-key pull-left'), style: { width: '48%' } },
													"\u8BC1\u4E66(PEM\u683C\u5F0F)",
													(0, snabbdom_1.jsx)("br", null),
													this.$textarea({ model: 'certPem' })),
												(0, snabbdom_1.jsx)("div", { class: this.$class('ssl-btn pull-left mt10'), style: { width: '100%' } }, this.$button({
													title: '保存',
													click: this.savePanelSsl.bind(this),
												}))),
											this.$ul({ style: 'clear:both; padding-top:10px;' }, [
												[
													(0, snabbdom_1.jsx)("span", null,
														"\u7C98\u8D34\u60A8\u7684*.key\u4EE5\u53CA*.pem\u5185\u5BB9\uFF0C\u7136\u540E\u4FDD\u5B58\u5373\u53EF",
														this.$link({
															title: '帮助',
															href: 'http://www.bt.cn/bbs/thread-704-1-1.html',
														}),
														"\u3002"),
												],
												['如果浏览器提示证书链不完整,请检查是否正确拼接PEM证书'],
												['PEM格式证书 = 域名证书.crt + 根证书(root_bundle).crt'],
											])));
									},
									mounted: function () {
										return __awaiter(this, void 0, void 0, function () {
											var param, copyRoot;
											return __generator(this, function (_a) {
												switch (_a.label) {
													case 0: return [4, that.$require('clipboard')];
													case 1:
														param = _a.sent();
														document.getElementById('copyRootPassword').setAttribute('data-clipboard-text', root_password_1);
														copyRoot = new param.clipboard('#copyRootPassword');
														copyRoot.on('success', function (e) {
															that.$msg('复制成功');
														});
														return [2];
												}
											});
										});
									},
									methods: {
										savePanelSsl: function () {
											return __awaiter(this, void 0, void 0, function () {
												var _a, certPem, privateKey;
												return __generator(this, function (_b) {
													switch (_b.label) {
														case 0: return [4, that.$verifySubmitList([
															[!this.privateKey, '密钥（KEY）不能为空'],
															[!this.certPem, '证书(PEM格式)不能为空'],
														])];
														case 1:
															_b.sent();
															_a = this, certPem = _a.certPem, privateKey = _a.privateKey;
															return [4, that.$request('savePanelSsl', { privateKey: privateKey, certPem: certPem })];
														case 2:
															_b.sent();
															return [2];
													}
												});
											});
										},
										setPanelSsl: function () {
											return __awaiter(this, void 0, void 0, function () {
												var _a, certPem_1, privateKey_1, rdata, rdata, err_1;
												return __generator(this, function (_b) {
													switch (_b.label) {
														case 0:
															if (!this.panel_ssl) return [3, 3];
															_a = this, certPem_1 = _a.certPem, privateKey_1 = _a.privateKey;
															return [4, that.$request('setPanelSsl', {
																cert_type: '0',
																privateKey: privateKey_1,
																certPem: certPem_1,
															})];
														case 1:
															_b.sent();
															return [4, that.$request('restartPanel', false)];
														case 2:
															rdata = _b.sent();
															sessionStorage.clear(); // 清除sessionStorage
															localStorage.clear(); // 清除localStorage
															// 清除所有cookie
															const keys = document.cookie.match(/[^ =;]+(?=\=)/g);
															if (keys) {
																for (let i = keys.length; i--;) {
																	document.cookie = keys[i] + '=0;expires=' + new Date(0).toUTCString();
																}
															}
															rdata.status && that.$refreshBrowser(location.href.replace(/^http:/, 'https:'));
															return [3, 9];
														case 3:
															if (that.configInfo.ssl_verify) {
																$('[name=panel_ssl]').prop('checked', true);
																return [2, layer.msg('检测到当前面板已开启访问设备验证，请先关闭访问设备验证', { icon: 2 })];
															}
															_b.label = 4;
														case 4:
															_b.trys.push([4, 8, , 9]);
															return [4, that.$confirm({
																title: "\u5173\u95ED\u9762\u677FSSL",
																msg: "\u5173\u95ED\u9762\u677FSSL\u8BC1\u4E66\uFF0C\u662F\u5426\u7EE7\u7EED\uFF01",
															})];
														case 5:
															_b.sent();
															return [4, that.$request('setPanelSsl')];
														case 6:
															_b.sent();
															return [4, that.$request('restartPanel', false)];
														case 7:
															rdata = _b.sent();
															if (rdata.status) {
																sessionStorage.clear(); // 清除sessionStorage
																localStorage.clear(); // 清除localStorage
																// 清除所有cookie
																const keys = document.cookie.match(/[^ =;]+(?=\=)/g);
																if (keys) {
																	for (let i = keys.length; i--;) {
																		document.cookie = keys[i] + '=0;expires=' + new Date(0).toUTCString();
																	}
																}
																that.$refreshBrowser(location.href.replace(/^https:/, 'http:'));
															}
															return [3, 9];
														case 8:
															err_1 = _b.sent();
															this.panel_ssl = !this.panel_ssl;
															return [3, 9];
														case 9: return [2];
													}
												});
											});
										},
									},
								},
							})];
						case 3:
							_b.sent();
							return [3, 5];
						case 4:
							error_4 = _b.sent();
							return [3, 5];
						case 5: return [2];
					}
				});
			});
		};
		Config.prototype.setBasicAuthView = function () {
			return __awaiter(this, void 0, void 0, function () {
				var _this = this;
				return __generator(this, function (_a) {
					return [2, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
						var error_5;
						var _this = this;
						return __generator(this, function (_a) {
							switch (_a.label) {
								case 0:
									_a.trys.push([0, 2, , 3]);
									return [4, this.$open({
										title: '开启BasicAuth认证提示',
										area: ['500px', '385px'],
										btn: ['提交', '取消'],
										content: {
											data: { agreement: false },
											template: function () {
												return ((0, snabbdom_1.jsx)("div", { class: this.$class('bt-form pd25') },
													this.$warningTitle('风险操作！此功能不懂请勿开启！'),
													this.$ul({ className: 'explainDescribeList pd15' }, [
														['必须要用到且了解此功能才决定自己是否要开启!', 'red'],
														['开启后，以任何方式访问面板，将先要求输入BasicAuth用户名和密码'],
														['开启后，能有效防止面板被扫描发现，但并不能代替面板本身的帐号密码'],
														['请牢记BasicAuth密码，一但忘记将无法访问面板'],
														['如忘记密码，可在SSH通过bt命令来关闭BasicAuth验证'],
													]),
													this.$learnMore({
														title: ((0, snabbdom_1.jsx)("span", null,
															"\u6211\u5DF2\u7ECF\u4E86\u89E3\u8BE6\u60C5,\u5E76\u613F\u610F\u627F\u62C5\u98CE\u9669",
															' ',
															this.$link({
																title: '什么是BasicAuth认证？',
																href: 'https://www.bt.cn/bbs/thread-34374-1-1.html',
															}))),
														model: 'agreement',
														id: 'checkBasicAuth',
													})));
											},
										},
										yes: function (config) { return __awaiter(_this, void 0, void 0, function () {
											var close, vm, error_6;
											return __generator(this, function (_a) {
												switch (_a.label) {
													case 0:
														close = config.close, vm = config.vm;
														if (!vm.agreement)
															return [2, this.$tips({
																el: '#checkBasicAuth',
																msg: '请阅读并同意承担风险',
															})];
														close();
														_a.label = 1;
													case 1:
														_a.trys.push([1, 3, , 4]);
														return [4, this.setBasicAuthConfigView()];
													case 2:
														_a.sent();
														return [3, 4];
													case 3:
														error_6 = _a.sent();
														reject(error_6);
														return [3, 4];
													case 4: return [2];
												}
											});
										}); },
									})];
								case 1:
									_a.sent();
									return [3, 3];
								case 2:
									error_5 = _a.sent();
									reject(error_5);
									return [3, 3];
								case 3: return [2];
							}
						});
					}); })];
				});
			});
		};
		Config.prototype.setBasicAuthConfigView = function () {
			return __awaiter(this, void 0, void 0, function () {
				var that;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0:
							that = this;
							return [4, this.$open({
								title: '配置BasicAuth认证',
								area: ['500px', '400px'],
								content: {
									data: { open: true, basic_user: '', basic_pwd: '' },
									template: function () {
										var inputWidth = '280px';
										return ((0, snabbdom_1.jsx)("div", { class: this.$class('bt-form pd25') },
											this.$line({ title: '服务状态' }, this.$switch({
												model: 'open',
												change: this.setBasicAuthConfig.bind(this),
											})),
											this.$line({ title: '用户名' }, this.$input({
												model: 'basic_user',
												placeholder: '请设置用户名',
												width: inputWidth,
											})),
											this.$line({ title: '密码' }, this.$input({
												model: 'basic_pwd',
												placeholder: '请设置密码',
												width: inputWidth,
											})),
											this.$line({ title: '' }, this.$button({
												title: '保存配置',
												click: this.saveBasicAuth.bind(this),
											})),
											this.$ul([
												['注意：请不要在这里使用您的常用密码，这可能导致密码泄漏！', 'red'],
												['开启后，以任何方式访问面板，将先要求输入BasicAuth用户名和密码'],
												['开启后，能有效防止面板被扫描发现，但并不能代替面板本身的帐号密码'],
												['请牢记BasicAuth密码，一但忘记将无法访问面板'],
												['如忘记密码，可在SSH通过bt命令来关闭BasicAuth验证'],
											])));
									},
									methods: {
										setBasicAuthConfig: function () {
											var basicAuth = document.getElementById('basicAuth');
											basicAuth.checked = this.open;
										},
										saveBasicAuth: function () {
											return __awaiter(this, void 0, void 0, function () {
												var _a, basic_user, basic_pwd, open, rdata;
												return __generator(this, function (_b) {
													switch (_b.label) {
														case 0:
															_a = this, basic_user = _a.basic_user, basic_pwd = _a.basic_pwd, open = _a.open;
															return [4, that.$request('setBasicAuth', {
																basic_user: basic_user,
																basic_pwd: basic_pwd,
																open: open ? 'True' : 'False',
															})];
														case 1:
															rdata = _b.sent();
															rdata.status && this.$closeLayer() && that.$refreshBrowser();
															return [2];
													}
												});
											});
										},
									},
								},
							})];
						case 1:
							_a.sent();
							return [2];
					}
				});
			});
		};
		Config.prototype.setGoogleAuthView = function () {
			return __awaiter(this, void 0, void 0, function () {
				var _this = this;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0: return [4, this.$open({
							title: '设置动态口令认证',
							area: ['500px', '560px'],
							btn: ['提交', '取消'],
							content: {
								data: { agreement: false },
								template: function () {
									return ((0, snabbdom_1.jsx)("div", { class: this.$class('bt-form pd25') },
										this.$warningTitle('风险操作！此功能不懂请勿开启！'),
										this.$ul({ className: 'explainDescribeList pd15' }, [
											['必须要用到且了解此功能才决定自己是否要开启!', 'red'],
											['如果无法验证，命令行输入"bt 24" 取消动态口令认证', 'red'],
											['开启服务后，请立即绑定，以免出现面板不能访问。'],
											['请先下载宝塔APP或(谷歌认证器)，并完成安装和初始化。'],
											[
												(0, snabbdom_1.jsx)("span", null,
													"\u57FA\u4E8Egoogle Authenticator \u5F00\u53D1,\u5982\u9047\u5230\u95EE\u9898\u8BF7",
													' ',
													this.$link({
														title: '查看详情',
														href: 'https://www.bt.cn/bbs/forum.php?mod=viewthread&tid=105839',
													})),
											],
										]),
										(0, snabbdom_1.jsx)("div", { class: { download_Qcode: true } },
											(0, snabbdom_1.jsx)("div", { class: { item_down: true } },
												(0, snabbdom_1.jsx)("div", { class: { qcode_title: true } }, "Android/IOS\u5E94\u7528 \u626B\u7801\u4E0B\u8F7D"),
												(0, snabbdom_1.jsx)("div", { class: { qcode_conter: true } },
													(0, snabbdom_1.jsx)("img", { props: { src: '/static/img/bt_app.png' } })))),
										this.$learnMore({
											title: '我已安装APP和了解详情,并愿意承担风险！',
											model: 'agreement',
											id: 'checkAuthenticator',
										})));
								},
							},
							yes: function (config) { return __awaiter(_this, void 0, void 0, function () {
								var close, vm, rdata;
								return __generator(this, function (_a) {
									switch (_a.label) {
										case 0:
											close = config.close, vm = config.vm;
											if (!vm.agreement)
												return [2, this.$tips({
													el: '#checkAuthenticator',
													msg: '请阅读并同意承担风险',
												})];
											return [4, this.$request('setTwoStepAuth', { act: 1 })];
										case 1:
											rdata = _a.sent();
											if (!rdata.status) return [3, 3];
											$('input[name="check_two_step"]').prop('checked', true);
											close();
											return [4, this.googleAuthRelationView()];
										case 2:
											_a.sent();
											_a.label = 3;
										case 3: return [2];
									}
								});
							}); },
						})];
						case 1:
							_a.sent();
							return [2];
					}
				});
			});
		};
		Config.prototype.googleAuthRelationView = function () {
			return __awaiter(this, void 0, void 0, function () {
				var that, rdata, error_7;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0:
							that = this;
							return [4, this.$request('getTwoStepKey', false)];
						case 1:
							rdata = _a.sent();
							if (typeof rdata.status === 'boolean' && !rdata.status)
								return [2, this.setGoogleAuthView()];
							_a.label = 2;
						case 2:
							_a.trys.push([2, 4, , 5]);
							return [4, this.$open({
								title: '设置动态口令认证',
								area: ['550px', '400px'],
								content: {
									data: {},
									template: function () {
										return ((0, snabbdom_1.jsx)("div", { class: this.$class('bt-form pd25') },
											(0, snabbdom_1.jsx)("div", { class: this.$class('verify_item') },
												(0, snabbdom_1.jsx)("div", { class: this.$class('verify_vice_title'), style: this.$style('font-weight: 500;font-size:16px;') }, "\u626B\u7801\u7ED1\u5B9A\uFF08\u4F7F\u7528\u5B9D\u5854\u9762\u677FAPP\u6216Google\u8EAB\u4EFD\u9A8C\u8BC1\u5668APP\u626B\u7801\uFF09"),
												(0, snabbdom_1.jsx)("div", { class: this.$class('verify_conter'), style: this.$style('text-align:center;padding-top:10px;') },
													(0, snabbdom_1.jsx)("div", { props: { id: 'verify_qrcode' }, key: 'verifyQrcode' }))),
											this.$ul({ className: 'verify_tips' }, [
												[
													(0, snabbdom_1.jsx)("span", null,
														"\u63D0\u793A\uFF1A\u8BF7\u4F7F\u7528\u201C \u5B9D\u5854\u9762\u677FAPP\u6216Google\u8EAB\u4EFD\u9A8C\u8BC1\u5668APP \u201D\u7ED1\u5B9A,\u5404\u5927\u8F6F\u4EF6\u5546\u5E97\u5747\u53EF\u4E0B\u8F7D\u8BE5APP\uFF0C\u652F\u6301\u5B89\u5353\u3001IOS\u7CFB\u7EDF\u3002",
														this.$link({
															title: '使用教程',
															href: 'https://www.bt.cn/bbs/thread-47408-1-1.html',
														})),
												],
												['开启服务后，请立即使用“宝塔面板APP或Google身份验证器APP”绑定，以免出现无法登录的情况。', 'red'],
											])));
									},
									mounted: function () {
										return __awaiter(this, void 0, void 0, function () {
											var rdata;
											return __generator(this, function (_a) {
												switch (_a.label) {
													case 0: return [4, that.$request('getQrcodeData', { act: 1 })];
													case 1:
														rdata = _a.sent();
														return [4, that.$require('jquery.qrcode')];
													case 2:
														_a.sent();
														$('#verify_qrcode').qrcode({
															render: 'canvas',
															width: 150,
															height: 150,
															text: rdata,
														});
														return [2];
												}
											});
										});
									},
								},
							})];
						case 3:
							_a.sent();
							return [3, 5];
						case 4:
							error_7 = _a.sent();
							return [3, 5];
						case 5: return [2];
					}
				});
			});
		};
		Config.prototype.setAccessDeviceAuthView = function () {
			return __awaiter(this, void 0, void 0, function () {
				var _a, crl, ca;
				var _this = this;
				return __generator(this, function (_b) {
					switch (_b.label) {
						case 0: return [4, this.$request('getSslVerify', false)];
						case 1:
							_a = _b.sent(), crl = _a.crl, ca = _a.ca;
							return [4, this.$open({
								title: '设置访问设备验证',
								area: ['700px', '700px'],
								btn: ['提交', '取消'],
								content: {
									data: { agreement: '', crl: crl, ca: ca },
									template: function () {
										return ((0, snabbdom_1.jsx)("div", { class: this.$class('bt-form pd25') },
											this.$warningTitle('风险操作！此功能不懂别开启！'),
											this.$ul({ className: 'explainDescribeList pd15' }, [
												['必须要用到且了解此功能才决定自己是否要开启！', 'red'],
												['开启后电脑需要安装此证书，否则将无法访问，属于【极高安全级别】的限制，类似银行账号U盘密钥登录。'],
												['注销列表(crl)和证书(cert)可通过企业版插件[堡塔限制访问型证书->双向认证->服务器证书]获取。'],
												['开启之前请先下载好对应的[客户端证书]，否则将无法访问面板。'],
												['开启访问设备验证后，未授权的用户访问将会出现400错误。'],
												['开启后导致面板不能访问，命令行：bt 29 关闭访问设备验证。'],
											]),
											(0, snabbdom_1.jsx)("div", { class: { line: true } },
												(0, snabbdom_1.jsx)("div", { class: { myKeyCon: true } },
													(0, snabbdom_1.jsx)("div", { class: this.$class('ssl-con-key pull-left ca_show'), style: { width: '48.5%' } },
														"\u6CE8\u9500\u5217\u8868(crl)",
														(0, snabbdom_1.jsx)("br", null),
														this.$textarea({ model: 'crl' })),
													(0, snabbdom_1.jsx)("div", { class: this.$class('ssl-con-key pull-right ca_show'), style: { width: '48.5%' } },
														"\u8BC1\u4E66(cert)",
														(0, snabbdom_1.jsx)("br", null),
														this.$textarea({ model: 'ca' })),
													(0, snabbdom_1.jsx)("div", { class: { clear: true } }))),
											this.$learnMore({
												title: ((0, snabbdom_1.jsx)("span", null,
													"\u6211\u5DF2\u4E86\u7ECF\u89E3\u8BE6\u60C5,\u5E76\u613F\u610F\u627F\u62C5\u98CE\u9669\uFF01",
													' ',
													this.$link({
														title: '了解详情',
														href: 'https://www.bt.cn/bbs/thread-77863-1-1.html',
													}))),
												model: 'agreement',
												id: 'checkSslVerify',
											})));
									},
								},
								yes: function (content) { return __awaiter(_this, void 0, void 0, function () {
									var close, vm, rdata;
									return __generator(this, function (_a) {
										switch (_a.label) {
											case 0:
												close = content.close, vm = content.vm;
												if (!vm.agreement)
													return [2, this.$tips({
														el: '#checkSslVerify',
														msg: '请阅读并同意承担风险',
													})];
												return [4, this.$verifySubmitList([
													[!vm.crl, '注销列表(crl)不能为空'],
													[!vm.ca, '证书(cert)不能为空'],
												])];
											case 1:
												_a.sent();
												return [4, this.$request('setSslVerify', {
													crl: vm.crl,
													ca: vm.ca,
													status: 1,
												})];
											case 2:
												rdata = _a.sent();
												return [4, this.$request('restartPanel', false)];
											case 3:
												_a.sent();
												rdata.status && close() && this.$refreshBrowser();
												return [2];
										}
									});
								}); },
							})];
						case 2:
							_b.sent();
							return [2];
					}
				});
			});
		};
		Config.prototype.setAccessCertificateView = function () {
			return __awaiter(this, void 0, void 0, function () {
				var that, _a, crl, ca, error_8;
				return __generator(this, function (_b) {
					switch (_b.label) {
						case 0:
							that = this;
							return [4, this.$request('getSslVerify', false)];
						case 1:
							_a = _b.sent(), crl = _a.crl, ca = _a.ca;
							_b.label = 2;
						case 2:
							_b.trys.push([2, 4, , 5]);
							return [4, this.$open({
								title: '自定义证书',
								area: ['700px', '475px'],
								content: {
									data: { crl: crl, ca: ca },
									template: function () {
										return ((0, snabbdom_1.jsx)("div", { class: this.$class('pd20') },
											(0, snabbdom_1.jsx)("div", { class: this.$class('myKeyCon ptb15') },
												(0, snabbdom_1.jsx)("div", { class: this.$class('ssl-con-key pull-left mr20'), style: { width: '48%' } },
													"\u6CE8\u9500\u5217\u8868(crl)",
													(0, snabbdom_1.jsx)("br", null),
													this.$textarea({ model: 'crl' })),
												(0, snabbdom_1.jsx)("div", { class: this.$class('ssl-con-key pull-left'), style: { width: '48%' } },
													"\u8BC1\u4E66(cert)",
													(0, snabbdom_1.jsx)("br", null),
													this.$textarea({ model: 'ca' })),
												(0, snabbdom_1.jsx)("div", { class: this.$class('ssl-btn pull-left mtb15'), style: { width: '100%' } }, this.$button({
													title: '保存',
													click: this.saveSslVerify.bind(this),
												}))),
											this.$ul({ style: 'clear: both;' }, [['粘贴您的注销列表(crl)以及证书(cert)，然后保存即可。'], ['注销列表(crl)和证书(cert)可通过企业版插件[堡塔限制访问型证书->双向认证->服务器证书]获取。']])));
									},
									methods: {
										saveSslVerify: function () {
											return __awaiter(this, void 0, void 0, function () {
												var rdata;
												return __generator(this, function (_a) {
													switch (_a.label) {
														case 0: return [4, that.$verifySubmitList([
															[!this.ca, '证书(cert)不能为空'],
															[!this.crl, '注销列表(crl)不能为空'],
														])];
														case 1:
															_a.sent();
															return [4, that.$request('setSslVerify', {
																crl: this.crl,
																ca: this.ca,
																status: $('[name=ssl_verify]').prop('checked') ? 1 : 0,
															})];
														case 2:
															rdata = _a.sent();
															return [4, that.$request('restartPanel', false)];
														case 3:
															_a.sent();
															rdata.status && that.$refreshBrowser();
															return [2];
													}
												});
											});
										},
									},
								},
							})];
						case 3:
							_b.sent();
							return [3, 5];
						case 4:
							error_8 = _b.sent();
							return [3, 5];
						case 5: return [2];
					}
				});
			});
		};
		Config.prototype.setPanelPortView = function () {
			return __awaiter(this, void 0, void 0, function () {
				var error_9;
				var _this = this;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0:
							_a.trys.push([0, 2, , 3]);
							return [4, this.$open({
								title: '设置面板端口',
								area: ['400px', '340px'],
								btn: ['提交', '取消'],
								content: {
									data: { port: this.formInfo.port, agreement: false },
									template: function () {
										return ((0, snabbdom_1.jsx)("div", { class: this.$class('pd20 bt-form') },
											this.$ul({ className: 'explainDescribeList', style: 'margin-top:0;' }, [
												['有安全组的服务器请提前在安全组放行新端口', 'red'],
												['如果修改端口导致面板无法访问，请在SSH命令行通过bt命令改回原来的端口', 'red'],
											]),
											this.$line({ title: '面板端口' }, this.$input({
												model: 'port',
												placeholder: '请输入面板端口',
												width: '210px',
											})),
											this.$learnMore({
												title: ((0, snabbdom_1.jsx)("span", null,
													"\u6211\u5DF2\u4E86\u89E3,",
													this.$link({
														title: '如何放行端口？',
														href: 'https://www.bt.cn/bbs/thread-40037-1-1.html',
													}))),
												model: 'agreement',
												id: 'checkPanelPort',
											})));
									},
								},
								yes: function (content) { return __awaiter(_this, void 0, void 0, function () {
									var close, vm, port, rdata;
									return __generator(this, function (_a) {
										switch (_a.label) {
											case 0:
												close = content.close, vm = content.vm, port = parseInt(vm.port);
												if (!vm.agreement)
													return [2, this.$tips({
														el: '#checkPanelPort',
														msg: '请勾选已了解，继续操作',
													})];
												return [4, this.$verifySubmit(!this.$checkPort(port), '端口格式错误，可用范围：1-65535，<br />请避免使用以下端口【22,80,443,8080,8443】')];
											case 1:
												_a.sent();
												this.formInfo.port = port;
												return [4, this.$request('setPanelConfig', this.formInfo)];
											case 2:
												rdata = _a.sent();
												rdata.status && close() && this.$refreshBrowser("".concat(location.protocol, "//").concat(location.hostname, ":").concat(port).concat(location.pathname));
												return [2];
										}
									});
								}); },
							})];
						case 1:
							_a.sent();
							return [3, 3];
						case 2:
							error_9 = _a.sent();
							return [3, 3];
						case 3: return [2];
					}
				});
			});
		};
		Config.prototype.setSafetyEntranceView = function () {
			return __awaiter(this, void 0, void 0, function () {
				var error_10;
				var _this = this;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0:
							_a.trys.push([0, 2, , 3]);
							return [4, this.$open({
								title: '设置面板安全入口',
								area: ['400px', '180px'],
								btn: ['提交', '取消'],
								content: {
									data: { expire: this.configInfo.admin_path },
									template: function () {
										return ((0, snabbdom_1.jsx)("div", { class: this.$class('pd20 bt-form') }, this.$line({ title: '安全入口' }, this.$input({
											model: 'expire',
											placeholder: '请输入面板安全入口',
											width: '240px',
										}))));
									},
								},
								yes: function (content) { return __awaiter(_this, void 0, void 0, function () {
									var close, vm, admin_path, rdata, adminPathValue;
									return __generator(this, function (_a) {
										switch (_a.label) {
											case 0:
												close = content.close, vm = content.vm, admin_path = vm.expire;
												return [4, this.$verifySubmit(!admin_path, '安全入口不能为空')];
											case 1:
												_a.sent();
												return [4, this.$request('setAdminPath', { admin_path: rsa.encrypt_public(admin_path) })];
											case 2:
												rdata = _a.sent();
												adminPathValue = document.querySelector('[name="entrance"]');
												rdata.status && close() && (adminPathValue.value = admin_path);
												this.configInfo.admin_path = admin_path;
												return [2];
										}
									});
								}); },
							})];
						case 1:
							_a.sent();
							return [3, 3];
						case 2:
							error_10 = _a.sent();
							return [3, 3];
						case 3: return [2];
					}
				});
			});
		};
		Config.prototype.setPawExpirationView = function () {
			return __awaiter(this, void 0, void 0, function () {
				var error_11;
				var _this = this;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0:
							_a.trys.push([0, 2, , 3]);
							return [4, this.$open({
								title: '设置密码过期时间',
								area: ['350px', '245px'],
								btn: ['提交', '取消'],
								content: {
									data: { expire: this.configInfo.paw_expire_time },
									template: function () {
										return ((0, snabbdom_1.jsx)("div", { class: this.$class('pd20 bt-form') },
											this.$line({ title: '密码过期时间' }, this.$box(this.$input({
												model: 'expire',
												placeholder: '',
												width: '120px',
											}), (0, snabbdom_1.jsx)("span", null, "\u5929"))),
											this.$ul([['面板密码过期时间设置，过期后需要重新设置密码', 'red'], ['密码过期时间为“0天”，则关闭密码过期时间功能']])));
									},
								},
								yes: function (config) { return __awaiter(_this, void 0, void 0, function () {
									var close, vm, expire, rdata, pawExpireValue, _a, expire_time, expire_day;
									return __generator(this, function (_b) {
										switch (_b.label) {
											case 0:
												close = config.close, vm = config.vm, expire = vm.expire;
												return [4, this.$request('setPawExpire', { expire: expire })];
											case 1:
												rdata = _b.sent();
												pawExpireValue = document.querySelector('[name="paw_expire_time"]');
												return [4, this.$request('getPasswordConfig', false)];
											case 2:
												_a = _b.sent(), expire_time = _a.expire_time, expire_day = _a.expire_day;
												rdata.status && close() && (pawExpireValue.value = expire > 0 ? "".concat(this.$formatTime(expire_time), " ( \u5269\u4F59").concat(expire_day, "\u5929\u8FC7\u671F )") : "\u672A\u8BBE\u7F6E");
												this.configInfo.paw_expire_time = expire;
												return [2];
										}
									});
								}); },
							})];
						case 1:
							_a.sent();
							return [3, 3];
						case 2:
							error_11 = _a.sent();
							return [3, 3];
						case 3: return [2];
					}
				});
			});
		};
		Config.prototype.unbindUser = function () {
			return __awaiter(this, void 0, void 0, function () {
				var rdata;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0: return [4, this.$confirm({
							title: '解绑宝塔账号',
							msg: '解绑宝塔账号绑定，继续操作！',
						})];
						case 1:
							_a.sent();
							return [4, this.$request('unbindUserInfo')];
						case 2:
							rdata = _a.sent();
							rdata.status && this.$refreshBrowser();
							return [2];
					}
				});
			});
		};
		Config.prototype.setStatusCodeView = function () {
			return __awaiter(this, void 0, void 0, function () {
				var error_12;
				var _this = this;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0:
							_a.trys.push([0, 2, , 3]);
							return [4, this.$open({
								title: '设置未认证时的响应状态',
								area: ['420px', '220px'],
								btn: ['提交', '取消'],
								content: {
									data: { status_code: parseInt(sessionInfo.statusCode) },
									template: function () {
										return ((0, snabbdom_1.jsx)("div", { class: this.$class('pd20 bt-form') },
											this.$line({ title: '响应状态', width: '80px' }, this.$select({
												model: 'status_code',
												width: '250px',
												options: [
													{ label: '403-拒绝访问', value: 403 },
													{ label: '404-页面不存在', value: 404 },
													{ label: '416-无效的请求', value: 416 },
													{ label: '408-客户端超时', value: 408 },
													{ label: '400-客户端请求错误', value: 400 },
													{ label: '401-未授权访问', value: 401 },
												],
											})),
											this.$ul([['用于未登录且未正确输入安全入口时的响应,用于隐藏面板特征', 'red']])));
									},
								},
								yes: function (config) { return __awaiter(_this, void 0, void 0, function () {
									var close, vm, rdata;
									return __generator(this, function (_a) {
										switch (_a.label) {
											case 0:
												close = config.close, vm = config.vm;
												return [4, this.$request('setNotAuthStatus', {
													status_code: vm.status_code,
												})];
											case 1:
												rdata = _a.sent();
												rdata.status && close() && this.$refreshBrowser();
												return [2];
										}
									});
								}); },
							})];
						case 1:
							_a.sent();
							return [3, 3];
						case 2:
							error_12 = _a.sent();
							return [3, 3];
						case 3: return [2];
					}
				});
			});
		};
		Config.prototype.setRequestTypeView = function () {
			return __awaiter(this, void 0, void 0, function () {
				var error_13;
				var _this = this;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0:
							_a.trys.push([0, 2, , 3]);
							return [4, this.$open({
								title: '设置面板云端请求方式',
								area: ['420px', '180px'],
								btn: ['提交', '取消'],
								content: {
									data: { http_type: this.Info.request_type },
									template: function () {
										return ((0, snabbdom_1.jsx)("div", { class: this.$class('pd20 bt-form') }, this.$line({ title: '云端请求方式', width: '120px' }, this.$select({
											model: 'http_type',
											width: '180px',
											options: [
												{ label: 'Python', value: 'python' },
												{ label: 'Curl', value: 'curl' },
												{ label: 'PHP', value: 'php' },
											],
										}))));
									},
								},
								yes: function (config) { return __awaiter(_this, void 0, void 0, function () {
									var close, vm, rdata;
									return __generator(this, function (_a) {
										switch (_a.label) {
											case 0:
												close = config.close, vm = config.vm;
												return [4, this.$request('setRequestType', {
													http_type: vm.http_type,
												})];
											case 1:
												rdata = _a.sent();
												rdata.status && close() && this.$refreshBrowser();
												return [2];
										}
									});
								}); },
							})];
						case 1:
							_a.sent();
							return [3, 3];
						case 2:
							error_13 = _a.sent();
							return [3, 3];
						case 3: return [2];
					}
				});
			});
		};
		Config.prototype.setRequestIpTypeView = function () {
			return __awaiter(this, void 0, void 0, function () {
				var error_14;
				var _this = this;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0:
							_a.trys.push([0, 2, , 3]);
							return [4, this.$open({
								title: '设置面板云端请求线路',
								area: ['420px', '180px'],
								btn: ['提交', '取消'],
								content: {
									data: { iptype: this.Info.request_iptype },
									template: function () {
										return ((0, snabbdom_1.jsx)("div", { class: this.$class('pd20 bt-form') }, this.$line({ title: '云端请求线路', width: '120px' }, this.$select({
											model: 'iptype',
											width: '180px',
											options: [
												{ label: '自动', value: 'auto' },
												{ label: 'IPv4', value: 'ipv4' },
												{ label: 'IPv6', value: 'ipv6' },
											],
										}))));
									},
								},
								yes: function (config) { return __awaiter(_this, void 0, void 0, function () {
									var close, vm, rdata;
									return __generator(this, function (_a) {
										switch (_a.label) {
											case 0:
												close = config.close, vm = config.vm;
												return [4, this.$request('setRequestIpType', {
													iptype: vm.iptype,
												})];
											case 1:
												rdata = _a.sent();
												rdata.status && close() && this.$refreshBrowser();
												return [2];
										}
									});
								}); },
							})];
						case 1:
							_a.sent();
							return [3, 3];
						case 2:
							error_14 = _a.sent();
							return [3, 3];
						case 3: return [2];
					}
				});
			});
		};
		Config.prototype.setNodeConfigView = function () {
			return __awaiter(this, void 0, void 0, function () {
				var nodeConfig, select_1, err_2;
				var _this = this;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0:
							_a.trys.push([0, 3, , 4]);
							return [4, this.$request('getNodeConfig')];
						case 1:
							nodeConfig = _a.sent();
							select_1 = nodeConfig.map(function (item) { return ({
								label: item.node_name,
								value: item.node_id,
							}); });
							return [4, this.$open({
								title: '设置面板云端通讯节点配置',
								area: ['420px', '180px'],
								btn: ['提交', '取消'],
								content: {
									data: { nodeId: this.Info.node_id },
									template: function () {
										return ((0, snabbdom_1.jsx)("div", { class: this.$class('pd20 bt-form') }, this.$line({ title: '节点配置', width: '120px' }, this.$select({
											model: 'nodeId',
											width: '180px',
											options: select_1,
										}))));
									},
								},
								yes: function (config) { return __awaiter(_this, void 0, void 0, function () {
									var close, vm, res;
									return __generator(this, function (_a) {
										switch (_a.label) {
											case 0:
												close = config.close, vm = config.vm;
												return [4, this.$request('setNodeConfig', {
													node_id: vm.nodeId,
												})];
											case 1:
												res = _a.sent();
												res.status && close() && this.$refreshBrowser();
												return [2];
										}
									});
								}); },
							})];
						case 2:
							_a.sent();
							return [3, 4];
						case 3:
							err_2 = _a.sent();
							return [3, 4];
						case 4: return [2];
					}
				});
			});
		};
		Config.prototype.setPanelGroundView = function () {
			return __awaiter(this, void 0, void 0, function () {
				var rdata, html, is_option, that, arry;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0: return [4, this.$request('getMenuList')];
						case 1:
							rdata = _a.sent(), html = '', is_option = '', that = this;
							arry = ['dologin', 'memuAconfig', 'memuAsoft', 'memuA'];
							rdata.map(function (item, index) {
								is_option = "<div class=\"index-item\" style=\"float:right;\"><input class=\"btswitch btswitch-ios\" id=\"".concat(item.id, "-").concat(index, "\" name=\"").concat(item.id, "\" type=\"checkbox\" ").concat(item.show ? 'checked' : '', "><label class=\"btswitch-btn\" for=\"").concat(item.id, "-").concat(index, "\"></label></div>");
								arry.indexOf(item.id) > -1 && (is_option = '不可操作');
								html += "<tr><td>".concat(item.title, "</td><td><div style=\"float:right;\">").concat(is_option, "</div></td></tr>");
							});
							return [4, this.$open({
								title: '设置面板菜单栏目管理',
								area: ['350px', '532px'],
								content: "\n\t\t\t<div style=\"padding: 20px 15px;\">\n\t\t\t\t<div class=\"divtable softlist\" style=\"max-height: 448px; overflow: auto;\">\n\t\t\t\t\t<table class=\"table table-hover\" id=\"panel_menu_tab\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr><th>\u83DC\u5355\u680F\u76EE</th><th style=\"text-align:right;width:120px;\">\u662F\u5426\u663E\u793A</th></tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>".concat(html, "</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t</div>"),
								success: function ($layer) {
									bt.fixed_table('panel_menu_tab');
									$('#panel_menu_tab input').click(function () {
										var arry = [];
										$(this)
											.parents('tr')
											.siblings()
											.each(function (index, el) {
												if ($(this).find('input').length > 0 && !$(this).find('input').prop('checked')) {
													arry.push($(this).find('input').attr('name'));
												}
											});
										!$(this).prop('checked') && arry.push($(this).attr('name'));
										that.$request('setHideMenuList', { hide_list: JSON.stringify(arry) });
									});
								},
							})];
						case 2:
							_a.sent();
							return [2];
					}
				});
			});
		};
		Config.prototype.renderAlertView = function () {
			return __awaiter(this, void 0, void 0, function () {
				var _this = this;
				return __generator(this, function (_a) {
					$('.alert-view-box').unbind('click').on('click', '.tab-nav-border span', function (ev) {
						var el = $(ev.currentTarget), index = $(el).index();
						$(el).addClass('on').siblings().removeClass('on');
						$(el).parent().next().find('.tab-block').eq(index).addClass('on').siblings().removeClass('on');
						switch (index) {
							case 0:
								var alertModuleList = _this.$request(['push/get_task_template', '获取推送任务模板']);
								alertModuleList.then(function (res) {
									var merge = res.map(function (item) { return item.template; });
									_this.alertModuleList = [].concat.apply([], merge);
									_this.alertTaskList();
								});
								break;
							case 1:
								_this.alertConfigTable();
								break;
							case 2:
								_this.alertLogsTable();
								break;
						}
					});
					$('.alert-view-box .tab-nav-border span').eq(0).click();
					return [2];
				});
			});
		};
		Config.prototype.alertConfigTable = function () {
			return __awaiter(this, void 0, void 0, function () {
				var ChannelInfo, html, tbody, prevHTML;
				var _this = this;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0: return [4, this.$request('getMessageChannel', { loading: false, msg: false })];
						case 1:
							ChannelInfo = _a.sent();
							html = '', tbody = '', prevHTML = '';
							$('#alertConfig').empty();
							Object.getOwnPropertyNames(ChannelInfo).forEach(function (key) {
								var item = ChannelInfo[key], btnGroup = '';
								if (item.setup) {
									if (item.name != 'sms') {
										if (!$.isEmptyObject(item.data)) {
											if (item.name == 'mail')
												btnGroup += '<a class="btlink receiveMail">收件者邮箱</a>&nbsp;|&nbsp;';
											btnGroup += '<a class="btlink configEdit">编辑</a>&nbsp;|&nbsp;<a class="btlink alertTest">测试</a>&nbsp;|&nbsp;<a class="btlink uninstall_alert">删除</a>';
											if (item.name == 'wx_account')
												btnGroup = '<a class="btlink replaceWx">绑定</a>&nbsp;|&nbsp;<a class="btlink alertTest">测试</a>&nbsp;|&nbsp;<a class="btlink uninstall_alert">删除</a>';
										}
										else {
											btnGroup = '<a class="btlink configEdit">点击设置</a>';
										}
									}
									else {
										btnGroup = '<a class="btlink uninstall_alert">删除</a>';
									}
								}
								else {
									btnGroup = '<a class="btlink configEdit">点击设置</a>';
								}
								var renderHTML = "<tr data-name=\"".concat(item.name, "\">\n\t\t\t\t<td style=\"font-size: 0;\">\n\t\t\t\t\t<i class=\"config-alert-icon alert-icon-").concat(item.name, "\"></i>\n\t\t\t\t\t<div class=\"alert-config-content\">\n\t\t\t\t\t\t<span style=\"cursor:pointer\" class=\"").concat(item.name === 'wx_account' ? (item.setup ? 'replaceWx' : 'configEdit') : (item.name === 'sms' ? '' : 'configEdit'), "\">").concat(item.title, "</span>\n\t\t\t\t\t\t<p>").concat(item.ps, "<a class=\"btlink\" target=\"_blank\" href=\"").concat(item.help, "\">>>\u5E2E\u52A9\u6587\u6863</a></p>\n\t\t\t\t\t</div>\n\t\t\t\t</td>\n\t\t\t\t<td>").concat(_this.renderAlertModelConfigInfo(item), "</td>\n\t\t\t\t<td>").concat(item.version, "</td>\n\t\t\t\t<td style=\"text-align: right;\">").concat(btnGroup, "</td>\n\t\t\t</tr>");
								item.name === 'wx_account' ? prevHTML = renderHTML : tbody += renderHTML;
							});
							html = "<div class=\"divtable\">\n\t\t\t\t\t\t\t<table class=\"table table-hover\" id=\"panel_menu_tab\">\n\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t<tr><th width=\"440\">\u544A\u8B66\u6A21\u5757</th><th>\u914D\u7F6E\u60C5\u51B5</th><th width=\"70\">\u7248\u672C</th><th style=\"text-align: right;\">\u64CD\u4F5C</th></tr>\n\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t<tbody>".concat(prevHTML + tbody, "</tbody>\n\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t</div>");
							$('#alertConfig').html(html);
							this.alertEventBind(ChannelInfo);
							wxAccountBind();
							return [2];
					}
				});
			});
		};
		Config.prototype.renderAlertModelConfigInfo = function (mode) {
			var _info = '', noConfig = '<a class="bterror configEdit">未配置</a>', _data = mode.data, isEmpty = $.isEmptyObject(_data);
			if (mode.setup) {
				if (mode.name != 'sms' && mode.name != 'wx_account') {
					if (!$.isEmptyObject(_data)) {
						switch (mode.name) {
							case 'mail':
								if (_data.receive[0] == '') {
									_info = "<a class=\"bterror receiveMail\">\u672A\u8BBE\u7F6E\u6536\u4EF6\u90AE\u7BB1</a>";
								}
								else {
									_info = "\u5DF2\u8BBE\u7F6E".concat(_data.receive.length, "\u4E2A\u6536\u4EF6\u90AE\u7BB1,<a class=\"btlink receiveMail\">\u70B9\u51FB\u67E5\u770B</a>");
								}
								break;
							case 'dingding':
							case 'feishu':
							case 'weixin':
								_info = "\u63A5\u6536\u8005:\u3010".concat(isEmpty ? '' : _data.list.default.title, "\u3011");
								break;
						}
					}
					else {
						_info = noConfig;
					}
				}
				else if (mode.name == 'sms') {
					_info = "\u5269\u4F59\u53D1\u9001\u544A\u8B66".concat(_data.count, "\u6B21").concat(_data.count <= 100 ? ' <a class="btlink" onclick="bt.onlineService()">联系客服购买</a>' : '');
				}
				else if (mode.name == 'wx_account') {
					var boundCheck = '', res = $.isEmptyObject(_data) ? { is_subscribe: 0, is_bound: 0 } : _data.res;
					if (!res.is_subscribe || !res.is_bound)
						boundCheck = '<a class="bterror replaceWx" style="margin-left:0">未订阅公众号或绑定微信</a>';
					if (res.is_subscribe && res.is_bound)
						boundCheck = "\u5FAE\u4FE1\u8D26\u53F7\u3010".concat(res.nickname, "\u3011,\u4ECA\u65E5\u5269\u4F59\u53D1\u9001\u6B21\u6570:<span class=\"account_remaining\">").concat(res.remaining, "</span>");
					_info = boundCheck;
				}
			}
			else {
				_info = noConfig;
			}
			return _info;
		};
		Config.prototype.alertEventBind = function (info) {
			var _this = this;
			$('.receiveMail').click(function () { return __awaiter(_this, void 0, void 0, function () {
				var currentItem;
				var _this = this;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0: return [4, this.$request('getMessageChannel', { loading: false, msg: false })];
						case 1:
							currentItem = _a.sent();
							this.$open({
								title: '收件者邮箱',
								area: ['335px', '280px'],
								btn: ['保存', '取消'],
								closeBtn: 2,
								skin: 'alert-receive-view',
								content: "<div class=\"pd15\"><textarea name=\"recipient_textarea\" class=\"bt-input-text mr5\" type=\"text\" style=\"width: 300px; height:150px; line-height:20px\"></textarea>\n\t\t\t\t<div class=\"placeholder c9 reci_tips\" style=\"position: absolute;top: 25px;left: 25px; display:none\">\u6BCF\u884C\u586B\u5199\u4E00\u4E2A\u90AE\u7BB1\uFF0C\u4F8B\uFF1A<br>xxx@163.com<br>xxx@qq.com</div></div>",
								success: function () {
									var _tips = $('textarea[name=recipient_textarea]');
									var msg = '';
									if (!$.isEmptyObject(currentItem['mail']['data']['receive'])) {
										msg = currentItem['mail']['data']['receive'] ? currentItem['mail']['data']['receive'].join('\n') : '';
									}
									_tips.html(msg);
									if (_tips.val() == '')
										$('.reci_tips.placeholder').show();
									$('.placeholder').click(function () {
										$(this).hide().siblings('textarea').focus();
									});
									_tips.focus(function () {
										$('.reci_tips.placeholder').hide();
									});
									_tips.blur(function () {
										_tips.val() == '' ? $('.reci_tips.placeholder').show() : $('.reci_tips.placeholder').hide();
									});
								},
								yes: function (config) { return __awaiter(_this, void 0, void 0, function () {
									var close, reci_, rdata;
									return __generator(this, function (_a) {
										switch (_a.label) {
											case 0:
												close = config.close;
												reci_ = $('textarea[name=recipient_textarea]').val();
												return [4, this.$request('setMsgConfigmail', { mails: reci_ })];
											case 1:
												rdata = _a.sent();
												rdata.status && close();
												return [2];
										}
									});
								}); }
							});
							return [2];
					}
				});
			}); });
			$('.configEdit').click(function (ev) { return __awaiter(_this, void 0, void 0, function () {
				var _type;
				return __generator(this, function (_a) {
					_type = $(ev.currentTarget).parents('tr').data('name');
					this.setAlertConfigType(_type);
					return [2];
				});
			}); });
			$('.alertTest').click(function (ev) { return __awaiter(_this, void 0, void 0, function () {
				var _type, _result;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0:
							_type = $(ev.currentTarget).parents('tr').data('name');
							return [4, this.$request(['config/get_msg_fun', '测试发送'], {
								fun_name: 'push_data',
								module_name: _type,
								msg: '测试发送'
							})];
						case 1:
							_result = _a.sent();
							if (_result['status'])
								$('.account_remaining').html(Number($('.account_remaining').html()) - 1);
							return [2];
					}
				});
			}); });
			$('.replaceWx').click(function () {
				_this.setAlertConfigType('wx_account');
			});
			$('.uninstall_alert').click(function (ev) { return __awaiter(_this, void 0, void 0, function () {
				var _type, rdata, _a;
				return __generator(this, function (_b) {
					switch (_b.label) {
						case 0:
							_type = $(ev.currentTarget).parents('tr').data('name');
							return [4, this.$confirm({
								title: '删除' + info[_type].title + '模块',
								msg: '删除' + info[_type].title + '模块后,将无法发送面板告警信息,是否继续？',
							})];
						case 1:
							_b.sent();
							return [4, this.$request(['config/uninstall_msg_module&name=' + _type + '&is_del=1', '删除' + info[_type].title + '告警模块'])];
						case 2:
							rdata = _b.sent();
							_a = rdata.status;
							if (!_a) return [3, 4];
							return [4, this.alertConfigTable()];
						case 3:
							_a = (_b.sent());
							_b.label = 4;
						case 4:
							_a;
							return [2];
					}
				});
			}); });
		};
		Config.prototype.setAlertConfigType = function (type) {
			return __awaiter(this, void 0, void 0, function () {
				var _configData;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0: return [4, this.$request('getMessageChannel', { loading: false, msg: false })];
						case 1:
							_configData = _a.sent();
							switch (type) {
								case 'mail':
									renderMailConfigView(_configData[type]);
									break;
								case 'dingding':
								case 'feishu':
								case 'weixin':
									renderAlertUrlTypeChannelView(_configData[type]);
									break;
								case 'wx_account':
								case 'sms':
									alertOtherTypeInstall(_configData[type]);
									break;
							}
							return [2];
					}
				});
			});
		};
		Config.prototype.alertTaskList = function () {
			return __awaiter(this, void 0, void 0, function () {
				var ChannelMessage, resetChannelMessage, prevArray;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0: return [4, this.$request('getMessageChannel', { loading: false, msg: false })];
						case 1:
							ChannelMessage = _a.sent(), resetChannelMessage = [], prevArray = [];
							Object.getOwnPropertyNames(ChannelMessage).forEach(function (key) {
								var mod = ChannelMessage[key];
								key == 'wx_account' ? prevArray.push(mod) : resetChannelMessage.push(mod);
							});
							this.alertListModule = __spreadArray(__spreadArray([], prevArray, true), resetChannelMessage, true);
							return [4, this.addAlertTask()];
						case 2:
							_a.sent();
							return [4, this.renderAlarmList()];
						case 3:
							_a.sent();
							return [2];
					}
				});
			});
		};
		Config.prototype.addAlertTask = function () {
			return __awaiter(this, void 0, void 0, function () {
				var _config;
				var _this = this;
				return __generator(this, function (_a) {
					_config = this.switchPushType();
					bt_tools.form({
						el: '#addAlertTask',
						form: _config,
						submit: function (formData) {
							_this.setAlertConfigTask($.extend(true, {}, _this.alertInitInfo, formData));
						}
					});
					return [2];
				});
			});
		};
		Config.prototype.renderAlarmList = function () {
			var _this = this;
			$('#alertList').empty();
			var alertListTabel = bt_tools.table({
				el: '#alertList',
				url: '/push?action=get_push_list',
				default: "告警列表为空",
				autoHeight: true,
				height: 320,
				dataFilter: function (res) {
					var newArr = [];
					for (var obj in res) {
						if (Object.prototype.hasOwnProperty.call(res, obj)) {
							for (var objc in res[obj]) {
								if (Object.prototype.hasOwnProperty.call(res[obj], objc)) {
									if (!res[obj][objc]['tid'] || typeof _this.taskTypeList[res[obj][objc]['tid']] === 'undefined')
										continue;
									if (!res[obj][objc]['id'])
										res[obj][objc]['id'] = objc;
									newArr.push(res[obj][objc]);
								}
							}
						}
					}
					return { data: newArr };
				},
				column: [
					{
						type: 'checkbox',
						width: 20
					}, {
						fid: 'title',
						title: '标题',
						type: 'text',
						template: function (row) {
							var _title = row.title;
							if (!_title)
								_title = _this.taskTypeList[row['tid']].title;
							return "<span>".concat(_title, "</span>");
						}
					}, {
						fid: 'status',
						title: '状态',
						config: {
							icon: true,
							list: [
								[true, '正常', 'bt_success', 'glyphicon-play'],
								[false, '停用', 'bt_danger', 'glyphicon-pause']
							]
						},
						type: 'status',
						event: function (row) { return __awaiter(_this, void 0, void 0, function () {
							var param, rdata;
							return __generator(this, function (_a) {
								switch (_a.label) {
									case 0:
										if (row.type == 'ssh_login' || row.type == 'panel_login')
											return [2, layer.msg('不支持暂停' + row.title + '，如需停止请直接删除.', { icon: 0 })];
										param = {
											name: row.module_type,
											id: row.id,
											status: row.status ? 0 : 1
										};
										return [4, this.$request(['push/set_push_status', '设置告警任务'], param)];
									case 1:
										rdata = _a.sent();
										if (!rdata.status) return [3, 3];
										return [4, this.alertTaskList()];
									case 2:
										_a.sent();
										_a.label = 3;
									case 3: return [2];
								}
							});
						}); }
					}, {
						title: '告警方式',
						type: 'text',
						width: 265,
						template: function (row) {
							var alertMode = row.module.split(','), _mode = '';
							_this.alertListModule.forEach(function (mod) {
								if ($.inArray(mod.name, alertMode) >= 0)
									_mode += mod.title + ',';
							});
							_mode = _mode.substring(0, _mode.length - 1);
							return '<span>' + _mode + '</span>';
						}
					},
					{ fid: 'view_msg', title: '告警条件' },
					{
						title: '操作',
						type: 'group',
						width: 150,
						align: 'right',
						group: [{
							title: '编辑',
							event: function (row) {
								_this.setAlertTaskConfig(row);
							}
						}, {
							title: '删除',
							event: function (row) { return __awaiter(_this, void 0, void 0, function () {
								var rdata;
								return __generator(this, function (_a) {
									switch (_a.label) {
										case 0: return [4, this.$confirm({
											title: '删除告警任务',
											msg: '删除后将不再告警此条任务，是否继续？',
										})];
										case 1:
											_a.sent();
											return [4, this.$request(['push/del_push_config', '删除告警任务'], {
															name: row.module_type,
															id: row.id,
													})];
										case 2:
											rdata = _a.sent();
											if (!rdata.status) return [3, 4];
											return [4, this.alertTaskList()];
										case 3:
											_a.sent();
											_a.label = 4;
										case 4: return [2];
									}
								});
							}); }
						}]
					}
				],
				tootls: [{
					type: 'batch',
					positon: ['left', 'bottom'],
					config: {
						title: "删除",
						url: 'push?action=del_push_config',
						load: true,
						param: function (row) {
							return { name: row.module_type, id: row.id };
						},
						callback: function (that) {
							bt.confirm({
								title: '批量删除任务',
								msg: '批量删除后将无法恢复，是否继续？',
								icon: 0
						}, function (index) {
								layer.close(index);
								that.start_batch({}, function (list) {
									var html = '';
									for (var i = 0; i < list.length; i++) {
										var item = list[i];
										html += '<tr><td>' + (typeof item.project == 'undefined' ? item.title : (item.project == 'all' ? '所有' : item.project) + item.title) + '</td><td><div style="float:right;"><span style="color:' + (item.request.status ? '#20a53a' : 'red') + '">' + item.request.msg + '</span></div></td></tr>';
									}
									alertListTabel.$batch_success_table({
										title: '批量删除任务',
										th: '任务标题',
										html: html
								});
									alertListTabel.$refresh_table_list(true);
								});
							});
						}
					}
				}]
			});
		};
		Config.prototype.switchPushType = function (row, isEdit) {
			var _this = this;
			if (row === void 0) { row = $.extend(true, {}, this.alertInitInfo); }
			if (isEdit === void 0) { isEdit = false; }
			var renderNum = 1, taskOption = [], formData = $.extend(true, {}, row);
			if (!formData.tid)
				formData.tid = this.alertModuleList[0].tid;
			this.verifyParam[formData.tid] = [];
			this.alertModuleList.forEach(function (item, index) {
				taskOption.push({ title: item.title, value: item.tid });
				_this.taskTypeList[item['tid']] = item;
			});
			var config = [{
				label: '任务类型',
				group: {
					type: 'select',
					name: 'tid',
					width: '250px',
					value: formData.tid,
					class: 'projectBox',
					list: taskOption,
					disabled: isEdit,
					unit: (formData.tid == 'site_push@8' && !isEdit) ? '* 当检测到新的版本时发送一次通知' : '',
					change: function (formD, element, that) {
						var config = _this.switchPushType(isEdit ? formD : $.extend(true, {}, _this.alertInitInfo, { tid: formD.tid }));
						that.$again_render_form(config);
					}
				}
			}];
			var taskType = this.taskTypeList[formData.tid];
			var lineData = {};
			if (taskType.sorted) {
				taskType.sorted.forEach(function (findArray) {
					renderNum++;
					var firstStr = taskType.field.find(function (item) {
						return item.attr == findArray[0];
					});
					lineData = {
						label: firstStr.name,
						group: []
					};
					findArray.forEach(function (findItem, index) {
						_this.verifyParam[formData.tid].push(findItem);
						var templateConfig = taskType.field.find(function (item) {
							return item.attr == findItem;
						}), fieldItem = $.extend(true, {}, templateConfig);
						if (isEdit)
							fieldItem.default = formData[findItem].toString();
						var childGroup = {};
						for (var item in fieldItem) {
							if (!fieldItem.width)
								childGroup['width'] = fieldItem.type == 'select' ? '250px' : '70px';
							switch (item) {
								case 'default':
									childGroup['value'] = fieldItem.default;
									break;
								case 'name':
									childGroup['name'] = fieldItem.attr;
									break;
								default:
									childGroup[item] = fieldItem[item];
									if (childGroup['type'] == 'select' || childGroup['type'] == 'radio') {
										childGroup['list'] = fieldItem.items;
										if (childGroup['type'] == 'select' && childGroup['unit'])
											childGroup['style'] = { 'margin-right': '0px' };
										delete childGroup['items'];
										if (childGroup['type'] == 'radio' && formData.tid == 'system_push@0') {
											childGroup['event'] = function (formD, element, that) {
												var disk = that.config.form[1].group[0].list.find(function (item) {
													return item.value == formD.project;
												});
												formD.cycle = $(that.element[0]).find('input[name="cycle"]:radio:checked').val();
												that.config.form[3].label = formD.cycle == '1' ? '剩余容量低于' : '占用率超过';
												that.config.form[3].group[0].unit = formD.cycle == '1' ? 'GB' : '%';
												that.data.count = formD.cycle == '1' ? (disk.count_default) : '80';
												that.$replace_render_content(3);
											};
										}
										else if (taskType.type === 'project_status' && childGroup['attr'] === 'cycle') {
											childGroup['change'] = function (formD, element, that) {
													var projectConfig = that.config.form[2].group[0];
													projectConfig.list = projectConfig['all_items'][formD.cycle - 1];
													projectConfig.value = projectConfig.list[0].value;
													that.$replace_render_content(2);
											};
									}
									}
							}
							if (fieldItem.unit)
								childGroup['class'] = 'group';
						}
						if (index != 0) {
							childGroup['label'] = fieldItem.name;
						}
						lineData['group'].push(childGroup);
					});
					config.push(lineData);
				});
			}
			var _checklist = [], isCheckType = [], accountConfigStatus = false, submitLine = {};
			this.alertListModule.forEach(function (mod, i) {
				if (formData.type != 'ssl' && mod.name == 'sms')
					return;
				if (formData.module) {
					isCheckType = formData.module.split(',');
				}
				if (mod.name === 'wx_account') {
					if (!$.isEmptyObject(mod.data) && mod.data.res.is_subscribe && mod.data.res.is_bound) {
						accountConfigStatus = true;
					}
				}
				_checklist.push({
					type: 'checkbox',
					name: mod.name,
					class: 'module-check ' + ((!mod.setup || $.isEmptyObject(mod.data)) ? 'check_disabled' : ((mod.name == 'wx_account' && !accountConfigStatus) ? 'check_disabled' : '')) + ' aNum_' + renderNum,
					style: { 'margin-right': '10px' },
					disabled: (!mod.setup || $.isEmptyObject(mod.data)) ? true : ((mod.name == 'wx_account' && !accountConfigStatus) ? true : false),
					value: $.inArray(mod.name, isCheckType) >= 0 ? 1 : 0,
					title: (mod.name == 'wx_account' ? '<b style="color: #fc6d26;">[推荐]</b>' : '') + mod.title + ((!mod.setup || $.isEmptyObject(mod.data)) ? '<span style="color:red;cursor: pointer;" class="alertInstall">[点击安装]</span>' : (((mod.name == 'wx_account' && !accountConfigStatus) ? '[<a target="_blank" class="bterror alertInstall">未配置</a>]' : ''))),
					event: function (formD, element, thatE) {
						var num = $(thatE.element[0]).find('.module-check').attr('class').split('aNum_')[1];
						thatE.config.form[num].group[i].value = !formD[mod.name] ? 0 : 1;
					}
				});
			});
			if (!isEdit) {
				var checkActive = _checklist.findIndex(function (ev) { return !ev.disabled; });
				if (checkActive >= 0)
					_checklist[checkActive].value = 1;
				submitLine = {
					label: '',
					group: {
						type: 'button',
						name: 'submitForm',
						title: '添加任务',
						event: function (formD, element, that) {
							that.submit(formD);
						},
					}
				};
			}
			else {
				if (formData.tid == 'system_push@0' && formData.cycle == '1') {
					config[3].label = '剩余容量低于';
					config[3].group[0].unit = 'GB';
				}
				if (formData.tid == 'site_push@9') {
					config[2].group[0].list = config[2].group[0]['all_items'][formData.cycle - 1];
					config[2].group[0].value = formData.project;
			}
			}
			config.push({
				label: '告警方式',
				group: _checklist
			});
			if (!$.isEmptyObject(submitLine))
				config.push(submitLine);
			return config;
		};
		Config.prototype.setAlertTaskConfig = function (row) {
			return __awaiter(this, void 0, void 0, function () {
				var _config;
				var _this = this;
				return __generator(this, function (_a) {
					_config = this.switchPushType(row, true);
					bt_tools.open({
						type: 1,
						title: '编辑告警任务',
						area: '570px',
						skin: 'panel_alert_task_view',
						btn: ['保存配置', '取消'],
						content: {
							class: 'pd15',
							form: _config,
							data: row
						},
						success: function (layers) {
							$(layers).find('.layui-layer-content').css('overflow', window.innerHeight > $(layers).height() ? 'inherit' : 'auto');
							$('.alertInstall').click(function (ev) {
								var _type = $(ev.currentTarget).parent('span').siblings('input').attr('name');
								_this.setAlertConfigType(_type);
							});
						},
						yes: function (formData, index) {
							_this.setAlertConfigTask($.extend(true, {}, row, formData), index);
						}
					});
					return [2];
				});
			});
		};
		Config.prototype.setAlertConfigTask = function (row, close) {
			if (close === void 0) { close = null; }
			return __awaiter(this, void 0, void 0, function () {
				var _configD, eData, pushType, formDomEv, cStatus, isCheck, _row, rdata;
				var _this = this;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0:
							_configD = {}, eData = {}, pushType = this.taskTypeList[row.tid], formDomEv = row.id ? '.panel_alert_task_view ' : '#addAlertTask ', cStatus = true;
							_configD['name'] = typeof row.module_type !== 'undefined' ? row.module_type : pushType.name;
							_configD['id'] = row.id ? row.id : ($.inArray(pushType.type, this.disabledOption) >= 0 ? pushType.type : new Date().getTime());
							eData['title'] = $(formDomEv + '.projectBox .bt_select_content').text();
							eData['type'] = pushType.type;
							this.verifyParam[row.tid].every(function (pkey) {
								var _pNode = pushType.field.find(function (ev) { return ev.attr == pkey; }), _pCname = _pNode.err_msg_prefix ? _pNode.err_msg_prefix : _pNode.name;
								if (row[pkey] != '' && !isNaN(row[pkey]) && typeof row[pkey] == 'string')
									row[pkey] = Number(row[pkey]);
								if (typeof row[pkey] == 'number' && row[pkey] <= 0) {
									var _num = $(formDomEv + '[name=' + pkey + ']'), isDisabled = _num.attr('disabled');
									if (isDisabled) {
										row[pkey] = Number(_num.val());
										return true;
									}
									if (row.tid.indexOf('system_push') != -1 && pkey == 'push_count' && row[pkey] == 0)
										return true;
									_this.$msg({ icon: 0, msg: _pCname + '不能小于0。', time: 0, closeBtn: 2 });
									cStatus = false;
									return false;
								}
								else if (!row[pkey]) {
									if (pkey == 'help')
										return true;
									_this.$msg({ icon: 0, msg: _pCname + '不能为空。', time: 0, closeBtn: 2 });
									cStatus = false;
									return false;
								}
								return true;
							});
							if (!cStatus)
								return [2, false];
							isCheck = [];
							$((row.id ? '.panel_alert_task_view ' : '#addAlertTask ') + '.module-check').not('.check_disabled').each(function () {
								if ($(this).find('input').prop('checked')) {
									isCheck.push($(this).find('input').prop('name'));
								}
							});
							eData['module'] = isCheck.join();
							if (!eData['module']) {
								this.$msg({ icon: 0, msg: '请选择一种告警方式。', time: 0, closeBtn: 2 });
								return [2, false];
							}
							eData['status'] = typeof row.status !== 'undefined' ? row.status : true;
							_row = $.extend(true, {}, row);
							delete _row.mail;
							delete _row.dingding;
							delete _row.weixin;
							delete _row.feishu;
							delete _row.wx_account;
							_configD['data'] = JSON.stringify($.extend(true, {}, _row, eData));
							return [4, this.$request(['push/set_push_config', '设置告警任务'], _configD)];
						case 1:
							rdata = _a.sent();
							if (!rdata.status) return [3, 3];
							layer.close(close);
							return [4, this.alertTaskList()];
						case 2:
							_a.sent();
							_a.label = 3;
						case 3: return [2];
					}
				});
			});
		};
		Config.prototype.alertLogsTable = function () {
			return __awaiter(this, void 0, void 0, function () {
				return __generator(this, function (_a) {
					$('#alertLog').empty();
					bt_tools.table({
						el: '#alertLog',
						load: '获取告警日志列表',
						url: '/push?action=get_push_logs',
						default: "告警日志为空",
						column: [
							{
								fid: 'log',
								title: '标题',
								type: 'text',
							}, {
								fid: 'addtime',
								width: 150,
								title: '时间',
								type: 'text',
							}
						],
						tootls: [{
							type: 'page',
							positon: ['right', 'bottom'],
							pageParam: 'p',
							page: 1,
							numberParam: 'limit',
							number: 20,
							numberList: [10, 20, 50, 100, 200],
							numberStatus: true,
							jump: true,
						}]
					});
					return [2];
				});
			});
		};
		Config.prototype.setTempAuthView = function () {
			return __awaiter(this, void 0, void 0, function () {
				var error_15;
				var _this = this;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0:
							_a.trys.push([0, 2, , 3]);
							return [4, this.$open({
								area: ['700px', '550px'],
								title: '临时授权管理',
								content: "<div class=\"login_view_table pd15\">\n\t\t\t\t\t<button class=\"btn btn-success btn-sm va0 create_temp_login\" >\u521B\u5EFA\u4E34\u65F6\u6388\u6743</button>\n\t\t\t\t\t<div class=\"divtable mt10\">\n\t\t\t\t\t<table class=\"table table-hover\">\n\t\t\t\t\t<thead><tr><th>\u767B\u5F55IP</th><th>\u72B6\u6001</th><th>\u767B\u5F55\u65F6\u95F4</th><th>\u8FC7\u671F\u65F6\u95F4</th><th style=\"text-align:right;\">\u64CD\u4F5C</th></tr></thead>\n\t\t\t\t\t<tbody id=\"temp_login_view_tbody\"></tbody>\n\t\t\t\t\t</table>\n\t\t\t\t\t<div class=\"temp_login_view_page page\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>",
								success: function () {
									_this.reanderTempAuthList();
									function fixed_table(name) {
										$('#' + name)
											.parent()
											.bind('scroll', function () {
												var scrollTop = this.scrollTop;
												$(this)
													.find('thead')
													.css({
														transform: 'translateY(' + scrollTop + 'px)',
														position: 'relative',
														'z-index': '1',
													});
											});
									}
									$('.create_temp_login').on('click', function () { return __awaiter(_this, void 0, void 0, function () {
										var expire_time, open, convertTimestamp, error_16;
										var _this = this;
										return __generator(this, function (_a) {
											switch (_a.label) {
												case 0:
														expire_time = 0;
														return [4, this.$open({
																		title: '创建临时授权',
																		btn: ['创建', '取消'],
																		area: '430px',
																		content: '<div>\
																			<div id="t-form" style="padding:20px" >\
																					<div style="display: flex;flex-direction: row;align-items: center;">\
																							<span style="width: 100px;text-align: right">授权时间：</span>\
																							<div class="btn-group mr10 cutLoginLogsType">\
																								<button id="button-0" type="button" class="btn btn-sm btn-success" data-type="3">3小时</button>\
																								<button id="button-1" type="button" class="btn btn-sm btn-default" data-type="12">12小时</button>\
																								<button id="button-2" type="button" class="btn btn-sm btn-default" data-type="24">24小时</button>\
																								<button id="button-3" type="button" class="btn btn-sm btn-default" data-type="0">自定义</button>\
																							</div>\
																					</div>\
																				<div class="custom" style="display: none">\
																						<div style="margin-top: 10px;display: flex;flex-direction: row;align-items: center;">\
																							<span style="width: 100px;text-align: right">失效日期：</span>\
																							<input type="text" autocomplete="off" class="search_input" id="test1">\
																						</div>\
																				</div>\
																				<div style="margin-top: 20px">\
																					<span style="color:red">注意1：滥用临时授权可能导致安全风险。</br>注意2：请勿在公共场合发布临时授权连接</span>\
																				</div>\
																			</div>\
																		</div>',
																		success: function () {
																				$('.btn-group').on('click', 'button', function () {
																						if (!$(this).hasClass('btn-success')) {
																								$(this).removeClass('btn-default').addClass('btn-success');
																								$(this).siblings().removeClass('btn-success').addClass('btn-default');
																						}
																						if ($(this).data('type') == '0') {
																								$('.custom').show();
																						}
																						else {
																								$('.custom').hide();
																						}
																				});
																				laydate.render({
																						elem: '#test1',
																						min: 0,
																				});
																				$(document).scroll(function () {
																					$('.layui-laydate').remove();
																					$('#test1').blur()
																				})
																		},
																		yes: function () {
																				var type = $('.btn-group').find('.btn-success').data('type');
																				var date = parseInt(String(new Date().getTime() / 1000));
																				switch (type) {
																						case 3:
																								expire_time = date + 3 * 60 * 60;
																								break;
																						case 12:
																								expire_time = date + 12 * 60 * 60;
																								break;
																						case 24:
																								expire_time = date + 24 * 60 * 60;
																								break;
																						case 0:
																								var input_date = $('#test1').val();
																								var datetime = new Date(input_date);
																								datetime.setHours(23, 59, 59, 999);
																								var timestamp = datetime.getTime();
																								expire_time = parseInt(String(timestamp/1000));
																								break;
																				}
																		}
																})];
												case 1:
														open = _a.sent();
														_a.label = 2;
												case 2:
														_a.trys.push([2, 4, , 5]);
														convertTimestamp = function (timestamp) {
																var seconds = timestamp - parseInt(String(new Date().getTime() / 1000));
																var minutes = Math.floor(seconds / 60);
																var hours = Math.floor(minutes / 60);
																var days = Math.floor(hours / 24);
																if (days > 0) {
																		return days + "天";
																}
																else if (hours > 0) {
																		return hours + "小时";
																}
																else {
																		return "不到1小时";
																}
														};
														return [4, this.$open({
																		area: '570px',
																		title: '创建临时授权',
																		content: "<div class=\"bt-form create_temp_view\">\n\t\t\t\t\t\t\t\t\t<div class=\"line\"><span class=\"tname\">\u4E34\u65F6\u6388\u6743\u5730\u5740</span><div class=\"info-r ml0\"><textarea id=\"temp_link\" class=\"bt-input-text mr20\" style=\"margin: 0px;width: 500px;height: 50px;line-height: 19px;\"></textarea></div></div>\n\t\t\t\t\t\t\t\t\t<div class=\"line\"><button type=\"submit\" class=\"btn btn-success btn-sm btn-copy-temp-link\" data-clipboard-text=\"\">\u590D\u5236\u5730\u5740</button></div>\n\t\t\t\t\t\t\t\t\t<ul class=\"help-info-text c7\"><li>\u4E34\u65F6\u6388\u6743\u751F\u6210\u540E".concat(convertTimestamp(expire_time), "\u5185\u4F7F\u7528\u6709\u6548\uFF0C\u4E3A\u4E00\u6B21\u6027\u6388\u6743\uFF0C\u4F7F\u7528\u540E\u7ACB\u5373\u5931\u6548</li><li>\u4F7F\u7528\u4E34\u65F6\u6388\u6743\u767B\u5F55\u9762\u677F\u540E").concat(convertTimestamp(expire_time), "\u5185\u62E5\u6709\u9762\u677F\u6240\u6709\u6743\u9650\uFF0C\u8BF7\u52FF\u5728\u516C\u5171\u573A\u5408\u53D1\u5E03\u4E34\u65F6\u6388\u6743\u8FDE\u63A5</li><li>\u6388\u6743\u8FDE\u63A5\u4FE1\u606F\u4EC5\u5728\u6B64\u5904\u663E\u793A\u4E00\u6B21\uFF0C\u82E5\u5728\u4F7F\u7528\u524D\u5FD8\u8BB0\uFF0C\u8BF7\u91CD\u65B0\u751F\u6210</li></ul>\n\t\t\t\t\t\t\t\t</div>"),
																		success: function () { return __awaiter(_this, void 0, void 0, function () {
																				var rdata, temp_link, clipboard, clipboards;
																				var _this = this;
																				return __generator(this, function (_a) {
																						switch (_a.label) {
																								case 0: return [4, this.$request('setTempAuthLink', { expire_time: expire_time })];
																								case 1:
																										rdata = _a.sent();
																										open.close();
																										temp_link = "".concat(location.origin, "/login?tmp_token=").concat(rdata.token);
																										$('#temp_link').val(temp_link);
																										$('.btn-copy-temp-link').attr('data-clipboard-text', temp_link);
																										this.reanderTempAuthList();
																										return [4, this.$require('clipboard')];
																								case 2:
																										clipboard = (_a.sent()).clipboard;
																										clipboards = new clipboard('.btn');
																										clipboards.on('success', function (ev) {
																												_this.$msg({ status: true, msg: '复制成功！' });
																												ev.clearSelection();
																										});
																										clipboards.on('error', function (ev) {
																												_this.$msg({
																														status: false,
																														msg: '复制失败，请手动复制地址',
																												});
																										});
																										return [2];
																						}
																				});
																		}); },
																})];
												case 3:
														_a.sent();
														return [3, 5];
												case 4:
														error_16 = _a.sent();
														return [3, 5];
												case 5: return [2];
										}
										});
									}); });
									$('#temp_login_view_tbody').on('click', '.logs_temp_login', function (ev) {
										var _a = $(ev.target).data(), id = _a.id, ip = _a.ip;
										try {
											_this.$open({
												area: ['700px', '550px'],
												title: "\u67E5\u770B\u64CD\u4F5C\u65E5\u5FD7[".concat(ip, "]"),
												content: "<div class=\"pd15\">\n\t\t\t\t\t\t\t\t\t<button class=\"btn btn-default btn-sm va0 refresh_login_logs\">\u5237\u65B0\u65E5\u5FD7</button>\n\t\t\t\t\t\t\t\t\t<div class=\"divtable mt10 tablescroll\" style=\"max-height: 420px;overflow-y: auto;border:none\">\n\t\t\t\t\t\t\t\t\t<table class=\"table table-hover\" id=\"logs_login_view_table\">\n\t\t\t\t\t\t\t\t\t\t<thead><tr><th width=\"90px\">\u64CD\u4F5C\u7C7B\u578B</th><th width=\"140px\">\u64CD\u4F5C\u65F6\u95F4</th><th>\u65E5\u5FD7</th></tr></thead>\n\t\t\t\t\t\t\t\t\t\t<tbody ></tbody>\n\t\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>",
												success: function () {
													_this.reanderTempLogsList(id);
													$('.refresh_login_logs').click(function () {
														_this.reanderTempLogsList(id);
													});
													fixed_table('logs_login_view_table');
												},
											});
										}
										catch (error) { }
									});
									$('#temp_login_view_tbody').on('click', '.remove_temp_login', function (ev) { return __awaiter(_this, void 0, void 0, function () {
										var id, rdata;
										return __generator(this, function (_a) {
											switch (_a.label) {
												case 0:
													id = $(ev.target).data().id;
													return [4, this.$confirm({
														title: '删除未使用授权',
														msg: '是否删除未使用授权记录，是否继续？',
													})];
												case 1:
													_a.sent();
													return [4, this.$request('removeTempAuthLink', { id: id })];
												case 2:
													rdata = _a.sent();
													return [4, this.$delay()];
												case 3:
													(_a.sent()) && rdata.status && this.reanderTempAuthList();
													return [2];
											}
										});
									}); });
									$('#temp_login_view_tbody').on('click', '.clear_temp_login', function (ev) { return __awaiter(_this, void 0, void 0, function () {
										var _a, id, ip, rdata;
										return __generator(this, function (_b) {
											switch (_b.label) {
												case 0:
													_a = $(ev.target).data(), id = _a.id, ip = _a.ip;
													return [4, this.$confirm({
														title: '强制登出[ ' + ip + ' ]',
														msg: '是否强制登出[ ' + ip + ' ]，是否继续？',
													})];
												case 1:
													_b.sent();
													return [4, this.$request('clearTempAuth', { id: id })];
												case 2:
													rdata = _b.sent();
													return [4, this.$delay()];
												case 3:
													(_b.sent()) && rdata.status && this.reanderTempAuthList();
													return [2];
											}
										});
									}); });
									$('.temp_login_view_page').on('click', 'a', function (ev) {
										ev.stopPropagation();
										ev.preventDefault();
										var href = $(ev.target).attr('href'), reg = /([0-9]*)$/, p = reg.exec(href)[0];
										_this.reanderTempAuthList(p);
									});
								},
							})];
						case 1:
							_a.sent();
							return [3, 3];
						case 2:
							error_15 = _a.sent();
							return [3, 3];
						case 3: return [2];
					}
				});
			});
		};
		Config.prototype.reanderTempAuthList = function (p) {
			if (p === void 0) { p = 1; }
			return __awaiter(this, void 0, void 0, function () {
				var html, rdata, _loop_1, this_1, i;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0:
							html = '';
							return [4, this.$request('getTempAuthList', { p: p, rows: 10 })];
						case 1:
							rdata = _a.sent();
							_loop_1 = function (i) {
								var item = rdata.data[i];
								html += "<tr>\n\t\t\t<td>".concat(item.login_addr || '未登录', "</td>\n\t\t\t<td>").concat((function () {
									switch (item.state) {
										case 0:
											return '<a style="color:green;">待使用</a>';
										case 1:
											return '<a style="color:brown;">已使用</a>';
										case -1:
											return '<a>已过期</a>';
									}
								})(), "</td>\n\t\t\t<td>").concat(item.login_time == 0 ? '未登录' : this_1.$formatTime(item.login_time), "</td>\n\t\t\t<td>").concat(this_1.$formatTime(item.expire), "</td>\n\t\t\t<td style=\"text-align:right;\">").concat((function () {
									if (item.state != 1)
										return "<a href=\"javascript:;\" class=\"btlink remove_temp_login\" data-ip=\"".concat(item.login_addr, "\" data-id=\"").concat(item.id, "\">\u5220\u9664</a>");
									if (item.online_state)
										return "<a href=\"javascript:;\" class=\"btlink clear_temp_login\" style=\"color:red\" data-ip=\"".concat(item.login_addr, "\" data-id=\"").concat(item.id, "\">\u5F3A\u5236\u767B\u51FA</a>&nbsp;&nbsp;|&nbsp;&nbsp;\n\t\t\t\t\t<a href=\"javascript:;\" class=\"btlink logs_temp_login\" data-ip=\"").concat(item.login_addr, "\" data-id=\"").concat(item.id, "\">\u64CD\u4F5C\u65E5\u5FD7</a>");
									return '<a href="javascript:;" class="btlink logs_temp_login" data-ip="' + item.login_addr + '" data-id="' + item.id + '">操作日志</a>&nbsp;&nbsp;|&nbsp;&nbsp;<a href="javascript:;" class="btlink remove_temp_login" data-ip="' + item.login_addr + '" data-id="' + item.id + '">删除</a>'
								})(), "</td>\n\t\t\t</tr > ");
							};
							this_1 = this;
							for (i = 0; i < rdata.data.length; i++) {
								_loop_1(i);
							}
							$('#temp_login_view_tbody').html(html);
							$('.temp_login_view_page').html(rdata.page);
							return [2];
					}
				});
			});
		};
		Config.prototype.reanderTempLogsList = function (id) {
			return __awaiter(this, void 0, void 0, function () {
				var html, rdata, i, item;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0:
							html = '';
							return [4, this.$request('getTempOperationLogs', { id: id })];
						case 1:
							rdata = _a.sent();
							for (i = 0; i < rdata.length; i++) {
								item = rdata[i];
								html += "<tr>\n\t\t\t\t<td>".concat(item.type, "</td>\n\t\t\t\t<td>").concat(item.addtime, "</td>\n\t\t\t\t<td><span style=\"white-space: pre;\">").concat(item.log, "</span></td>\n\t\t\t  </tr>");
							}
							$('#logs_login_view_table tbody').html(html);
							return [2];
					}
				});
			});
		};
		Config.prototype.reanderBanRegion = function (type) {
			return __awaiter(this, void 0, void 0, function () {
					var html, point, tip, city;
					return __generator(this, function (_a) {
							switch (_a.label) {
									case 0:
											html = $('#select-region');
											point = $('.regional-entry-policy');
											tip = '';
											if (!(type == 0)) return [3, 2];
											return [4, this.$request('getRegionConfig')];
									case 1:
											city = _a.sent();
											if (city.limit_area_status == 'true') {
													if (city.limit_type == "allow") {
															tip = "<span class=\"pla\" style=\"color:#fff;\">\u8BBE\u7F6E\u653E\u884C\u5730\u533A</span>";
															point.html('设置面板地区登录策略');
															html.data('ploy', 2);
													}
													else {
															tip = "<span class=\"pla\" style=\"color:#fff;\">\u8BBE\u7F6E\u5C4F\u853D\u5730\u533A</span>";
															point.text('设置面板地区登录策略');
															html.data('ploy', 1);
													}
											}
											else {
													tip = "<span class=\"pla\" style=\"color:#fff;\">\u8BBE\u7F6E\u5730\u533A\u767B\u5F55\u9650\u5236</span>";
													point.text('设置面板地区登录策略');
													html.data('ploy', 2);
											}
											localStorage.setItem('region', JSON.stringify(city));
											_a.label = 2;
									case 2:
											html.html("<button class=\"btn btn-success btn-sm\">".concat(tip, "</button>"));
											return [2];
							}
					});
			});
		};
		Config.prototype.renderConfigData = function () {
			return __awaiter(this, void 0, void 0, function () {
				var loadT, _a, panelSafe, twoStep, sslVerify, pawComplexity, bindUserInfo, getMenuList, getNodeConfig, data, username, webname, session_timeout, show_workorder, improvement, ssl_verify, sites_path, backup_path, systemdate, paw_complexity, paw_expire_time, check_two_step, bind_user_info, _b, port, admin_path, domain, limitip, address, key, item, el, type, menuHideList, statusCode, requestIpTypeVal, requestTypeVal, nodeConfigVal, menuList, i, item, statusCodeList, statusCodeTips, i, item, setRequestIpTypeText, setRequestTypeText, i, item, err_3;
				return __generator(this, function (_c) {
					switch (_c.label) {
						case 0:
							loadT = this.$load('正在获取面板配置信息，请稍侯...');
							_c.label = 1;
						case 1:
							_c.trys.push([1, 3, , 4]);
							return [4, Promise.all([
								this.$request('getPanelSafe', { id: 'panel_safe_push', name: 'site_push' }, { loading: false, msg: false }),
								this.$request('getCheckTwoStep', { loading: false, msg: false }),
								this.$request('getSslVerify', { loading: false, msg: false }),
								this.$request('getPasswordConfig', { loading: false, msg: false }),
								this.$request('getUserInfo', { loading: false, msg: false }),
								this.$request('getMenuList', { loading: false, msg: false }),
								this.$request('getNodeConfig', { loading: false, msg: false }),
							]).finally(function () {
								loadT.close();
							})];
						case 2:
							_a = _c.sent(), panelSafe = _a[0], twoStep = _a[1], sslVerify = _a[2], pawComplexity = _a[3], bindUserInfo = _a[4], getMenuList = _a[5], getNodeConfig = _a[6];
							this.Info = Object.assign(this.Info, bt.config, {
								panel_safe: panelSafe,
								check_two_step: twoStep.status,
								ssl_verify: sslVerify.status,
								paw_complexity: pawComplexity.password_safe,
								paw_expire_time: pawComplexity.expire,
								bind_user_info: bindUserInfo.data.username,
								menu_list: getMenuList,
							});
							data = this.Info;
							username = sessionInfo.username, webname = sessionInfo.title;
							session_timeout = data.session_timeout, show_workorder = data.show_workorder, improvement = data.improvement, ssl_verify = data.ssl_verify, sites_path = data.sites_path, backup_path = data.backup_path, systemdate = data.systemdate, paw_complexity = data.paw_complexity, paw_expire_time = data.paw_expire_time, check_two_step = data.check_two_step, bind_user_info = data.bind_user_info;
							_b = data.panel, port = _b.port, admin_path = _b.admin_path, domain = _b.domain, limitip = _b.limitip, address = _b.address;
							this.formInfo = {
								webname: webname,
								session_timeout: session_timeout,
								domain: domain,
								limitip: limitip,
								sites_path: sites_path,
								backup_path: backup_path,
								address: address,
								systemdate: systemdate,
								port: port,
							};
							this.configInfo = {
								close_panel: false,
								ipv6: data.ipv6 === 'checked',
								ssl: location.protocol.indexOf('https:') > -1,
								api: data.api === 'checked',
								is_local: data.is_local === 'checked',
								panel_safe: data.panel_safe.status,
								debug: data.debug === 'checked',
								check_two_step: check_two_step,
								show_workorder: show_workorder,
								improvement: improvement,
								ssl_verify: ssl_verify,
								webname: webname,
								port: port,
								session_timeout: session_timeout,
								admin_path: admin_path,
								basic_auth: data.basic_auth.open,
								domain: domain,
								limitip: limitip,
								sites_path: sites_path,
								backup_path: backup_path,
								address: address,
								systemdate: systemdate,
								username: username,
								password: '********',
								paw_complexity: paw_complexity,
								paw_expire_time: paw_expire_time,
								bind_user_info: bind_user_info,
							};
							for (key in this.configInfo) {
								if (Object.prototype.hasOwnProperty.call(this.configInfo, key)) {
									item = this.configInfo[key], el = $('input[name="' + key + '"]'), type = el.attr('type');
									if (type === 'checkbox') {
										item && el.prop('checked', item);
									}
									else if (key === 'paw_expire_time') {
										el.val(pawComplexity.expire > 0 ? "".concat(this.$formatTime(pawComplexity.expire_time), " (\u5269\u4F59").concat(pawComplexity.expire_day, "\u5929\u8FC7\u671F )") : "\u672A\u8BBE\u7F6E");
									}
									else {
										el.val(item);
									}
								}
							}
							menuHideList = $('[name="menu_hide_list"]'), statusCode = $('[name="status_code"]'), requestIpTypeVal = $('[name="request_iptype"]'), requestTypeVal = $('[name="request_type"]'), nodeConfigVal = $('[name="node_config"]');
							menuList = [];
							for (i = 0; i < getMenuList.length; i++) {
								item = getMenuList[i];
								if (!item.show)
									menuList.push(item.title);
							}
							if (getMenuList)
								menuHideList.val(menuList.join('、') || '无配置');
							statusCodeList = [
								{ label: '403-拒绝访问', value: 403 },
								{ label: '404-页面不存在', value: 404 },
								{ label: '416-无效的请求', value: 416 },
								{ label: '408-客户端超时', value: 408 },
								{ label: '400-客户端请求错误', value: 400 },
								{ label: '401-未授权访问', value: 401 },
							];
							statusCodeTips = void 0;
							for (i = 0; i < statusCodeList.length; i++) {
								item = statusCodeList[i];
								if (item.value === parseInt(sessionInfo.statusCode))
									statusCodeTips = item.label;
							}
							statusCode.val(statusCodeTips);
							setRequestIpTypeText = function (str) {
								switch (str) {
									case 'auto':
										return '自动';
									case 'ipv4':
										return 'IPv4';
									case 'ipv6':
										return 'IPv6';
								}
							};
							setRequestTypeText = function (str) {
								switch (str) {
									case 'python':
										return 'Python';
									case 'curl':
										return 'Curl';
									case 'php':
										return 'PHP';
								}
							};
							requestIpTypeVal.val(setRequestIpTypeText(this.Info.request_iptype));
							requestTypeVal.val(setRequestTypeText(this.Info.request_type));
							for (i = 0; i < getNodeConfig.length; i++) {
								item = getNodeConfig[i];
								if (item.status === 1) {
									nodeConfigVal.val(item.node_name);
									this.Info.node_id = item.node_id;
									break;
								}
							}
							return [3, 4];
						case 3:
							err_3 = _c.sent();
							return [3, 4];
						case 4: return [2];
					}
				});
			});
		};
		Config.prototype.cateClick = function () {
			var configTab = this.$getCookie('config-tab') || 'allConfig';
			if (!isNaN(Number(configTab))) {
				configTab = 'allConfig';
			}
			$('#configTab .tabs-item[data-type="' + configTab + '"]').trigger('click');
		};
		Config.prototype.searchSetup = function (search) {
			var _this = this;
			var lines = [];
			var titles = $('.configure-box .panel-config:not(.panel-base):not(.alert-view-box) .line-title');
			var tips = $('.configure-box .panel-config:not(.panel-base):not(.alert-view-box) .line-row-tips');
			lines.push.apply(lines, titles.filter(":contains(".concat(search, ")")));
			lines.push.apply(lines, tips.filter(":contains(".concat(search, ")")));
			$.each(titles, function (index, item) {
				var html = $(item).html();
				var reg1 = new RegExp('<i>', 'g');
				var reg2 = new RegExp('</i>', 'g');
				var newHtml = html.replace(reg1, '').replace(reg2, '');
				$(item).html(newHtml);
			});
			$.each(tips, function (index, item) {
				var html = $(item).html();
				var reg1 = new RegExp('<i>', 'g');
				var reg2 = new RegExp('</i>', 'g');
				var newHtml = html.replace(reg1, '').replace(reg2, '');
				$(item).html(newHtml);
			});
			$.each(lines, function (index, item) {
				var html = $(item).html();
				if (html && html.indexOf('<i>') === -1) {
					var nHtml = _this.searchHTML(search, html);
					$(item).html(nHtml);
				}
				$(item).parents('.line').removeClass('hide');
			});
			if (lines.length === 0) {
				$('.panel-search-box').text('很抱歉，没有找到有关"' + search + '"的设置，<span class="btlink openNPS" onclick="bt.openFeedback({title:\'宝塔面板需求反馈收集\',placeholder:\'<span>如果您在使用过程中遇到任何问题或功能不完善，请将您的问题或需求详细描述给我们，</span> <br>我们将尽力为您解决或完善。\',recover:\'我们特别重视您的需求反馈，我们会定期每周进行需求评审。希望能更好的帮到您\',key:30,proType:23})">提交需求反馈</span>');
			}
			else {
				$('.panel-search-box').text('');
			}
		};
		Config.prototype.searchHTML = function (search, html) {
			var expr = new RegExp(search, 'gi');
			var container = $('<div>').html(html);
			var elements = container.find('*').andSelf();
			var textNodes = elements.contents().not(elements);
			textNodes.each(function () {
				var matches = this.nodeValue.match(expr);
				if (matches) {
					var parts = this.nodeValue.split(expr);
					for (var n = 0; n < parts.length; n++) {
						if (n) {
							$('<i>')
								.text(matches[n - 1])
								.insertBefore(this);
						}
						if (parts[n]) {
							$(document.createTextNode(parts[n])).insertBefore(this);
						}
					}
					$(this).remove();
				}
			});
			return container.html();
		};
		Config.prototype.resetPanel = function () {
			var titles = $('.configure-box .panel-config:not(.panel-base) .line-title');
			var tips = $('.configure-box .panel-config:not(.panel-base) .line-row-tips');
			$.each(titles, function (index, item) {
				var html = $(item).html();
				var reg1 = new RegExp('<i>', 'g');
				var reg2 = new RegExp('</i>', 'g');
				var newHtml = html.replace(reg1, '').replace(reg2, '');
				$(item).html(newHtml);
			});
			$.each(tips, function (index, item) {
				var html = $(item).html();
				var reg1 = new RegExp('<i>', 'g');
				var reg2 = new RegExp('</i>', 'g');
				var newHtml = html.replace(reg1, '').replace(reg2, '');
				$(item).html(newHtml);
			});
			$('.panel-search').addClass('hide');
			$('.panel-config').addClass('hide');
			$('.panel-config .configure-title').removeClass('hide');
			$('.panel-config .configure-block>.line').removeClass('hide');
			$('.panel-config .configure-block').css({ padding: '25px 0' });
		};
		Config.prototype.openPanelSafeAlertMethodView = function (_status) {
			if (_status === void 0) { _status = false; }
			return __awaiter(this, void 0, void 0, function () {
				var safeInfo;
				var _this = this;
				return __generator(this, function (_a) {
					switch (_a.label) {
						case 0: return [4, this.$request('getPanelSafe', { id: 'panel_safe_push', name: 'site_push' }, {
							loading: false,
							msg: false
						})];
						case 1:
							safeInfo = _a.sent();
							if (typeof safeInfo.code == 'undefined' && typeof safeInfo.msg != 'undefined')
								return [2, layer.msg(safeInfo.msg, { icon: 2 })];
							if (typeof safeInfo.code != 'undefined' && safeInfo.code == 100)
								safeInfo = { module: '', status: false };
							_status = _status ? _status : safeInfo.status;
							this.$open({
								title: '面板安全告警',
								area: '470px',
								content: "<div class=\"pd15\">\n\t\t\t\t<div class=\"bt-form plr15\">\n\t\t\t\t\t<div class=\"line\">\n\t\t\t\t\t\t<span class=\"tname\">\u5B89\u5168\u63D0\u9192</span>\n\t\t\t\t\t\t<div class=\"info-r line-switch\">\n\t\t\t\t\t\t\t<input type=\"checkbox\" id=\"dueAlarm\" class=\"btswitch btswitch-ios\" name=\"due_alarm\" ".concat(_status ? 'checked="checked"' : '', " />\n\t\t\t\t\t\t\t<label class=\"btswitch-btn\" for=\"dueAlarm\"></label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"line\">\n\t\t\t\t\t\t<span class=\"tname\">\u544A\u8B66\u65B9\u5F0F</span>\n\t\t\t\t\t\t<div class=\"info-r installPush\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<ul class=\"help-info-text c7\">\n\t\t\t\t\t <li>\u70B9\u51FB\u5B89\u88C5\u540E\u72B6\u6001\u672A\u66F4\u65B0\uFF0C\u5C1D\u8BD5\u70B9\u51FB\u3010<a class=\"btlink handRefresh\">\u624B\u52A8\u5237\u65B0</a>\u3011</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</div>"),
								btn: ['保存配置', '取消'],
								success: function () {
									var that = _this;
									renderConfigHTML();
									$('.handRefresh').click(function () {
										renderConfigHTML();
									});
									function renderConfigHTML() {
										return __awaiter(this, void 0, void 0, function () {
											var ChannelInfo, html, unInstall, key, item, _html, accountConfigStatus;
											return __generator(this, function (_a) {
												switch (_a.label) {
													case 0: return [4, that.$request('getMessageChannel', { loading: false, msg: false })];
													case 1:
														ChannelInfo = _a.sent();
														html = '', unInstall = '';
														for (key in ChannelInfo) {
															item = ChannelInfo[key], _html = '', accountConfigStatus = false;
															if (key == 'sms')
																continue;
															if (key === 'wx_account') {
																if (!$.isEmptyObject(item.data) && item.data.res.is_subscribe && item.data.res.is_bound) {
																	accountConfigStatus = true;
																}
															}
															_html = '<div class="inlineBlock module-check ' + ((!item.setup || $.isEmptyObject(item.data)) ? 'check_disabled' : ((key == 'wx_account' && !accountConfigStatus) ? 'check_disabled' : '')) + '">' +
																'<div class="cursor-pointer form-checkbox-label mr10">' +
																'<i class="form-checkbox cust—checkbox cursor-pointer mr5 ' + (safeInfo.module.indexOf(item.name) > -1 ? ((!item.setup || $.isEmptyObject(item.data)) ? '' : ((key == 'wx_account' && !accountConfigStatus) ? '' : 'active')) : '') + '" data-type="' + item.name + '"></i>' +
																'<input type="checkbox" class="form—checkbox-input hide mr10" name="' + item.name + '" ' + (item.setup ? ((key == 'wx_account' && !accountConfigStatus) ? '' : 'checked') : '') + '/>' +
																'<span class="vertical_middle" title="' + item.ps + '">' + item.title + ((!item.setup || $.isEmptyObject(item.data)) ? '[<a target="_blank" class="bterror installNotice" data-type="' + item.name + '">点击安装</a>]' : ((key == 'wx_account' && !accountConfigStatus) ? '[<a target="_blank" class="bterror installNotice" data-type="' + item.name + '">未配置</a>]' : '')) + '</span>' +
																'</div>' +
																'</div>';
															if ((!item.setup || $.isEmptyObject(item.data))) {
																unInstall += _html;
															}
															else {
																html += _html;
															}
														}
														$('.installPush').html(html + unInstall);
														return [2];
												}
											});
										});
									}
									$('.installPush').on('click', '.form-checkbox-label', function (ev) {
										var el = $(ev.currentTarget), child = el.find('i');
										if (!child.parent().parent().hasClass('check_disabled')) {
											if (child.hasClass('active')) {
												child.removeClass('active');
												child.next().prop('checked', false);
											}
											else {
												child.addClass('active');
												child.next().prop('checked', true);
											}
										}
									});
									$('.installPush').on('click', '.installNotice', function (ev) {
										var el = $(ev.currentTarget), type = $(el).data('type');
										openAlertModuleInstallView(type);
									});
								},
								yes: function (config) { return __awaiter(_this, void 0, void 0, function () {
									var close, status, arry, data, res;
									return __generator(this, function (_a) {
										switch (_a.label) {
											case 0:
												close = config.close;
												status = $('input[name="due_alarm"]').is(':checked');
												arry = [];
												$('.installPush .active').each(function (index, ev) {
													var item = $(ev).attr('data-type');
													arry.push(item);
												});
												if (!arry.length)
													return [2, layer.msg('请选择至少一种告警通知方式', { icon: 2 })];
												data = {
													status: status,
													type: "panel_safe_push",
													title: "面板安全告警",
													module: arry.join(','),
												};
												return [4, this.$request('setPanelSafe', {
													name: 'site_push',
													id: 'panel_safe_push',
													data: JSON.stringify(data),
												})];
											case 1:
												res = _a.sent();
												res.status && $('#panelSafe').prop('checked', data.status) && close();
												return [2];
										}
									});
								}); },
								cancel: function () {
									$('#panelSafe').prop('checked', _status);
								},
								btn2: function () {
									$('#panelSafe').prop('checked', _status);
								}
							});
							return [2];
					}
				});
			});
		};
		Config.prototype.eventBind = function () {
			return __awaiter(this, void 0, void 0, function () {
				var _this = this;
				return __generator(this, function (_a) {
					$('#configTab .tabs-item').click(function (ev) {
						var el = $(ev.currentTarget);
						var type = el.attr('data-type');
						var panelConfig = $('.configure-box .panel-config:not(.alert-view-box)');
						el.addClass('active').siblings().removeClass('active');
						_this.resetPanel();
						if (type === 'allConfig') {
							$.each(panelConfig, function (index, item) {
								var itemType = $(item).attr('data-type');
								if (itemType === 'baseConfig')
									return;
								$(item).removeClass('hide');
							});
						}
						else {
							if (type === 'alertConfig')
								_this.renderAlertView();
							$('.configure-box .panel-config[data-type="' + type + '"]').removeClass('hide');
						}
						_this.$setCookie('config-tab', type);
					});
					this.cateClick();
					$('#search-val').on('input', function (e) {
						$(this).next().click();
					});
					$('#search-btn').click(function () {
						var search = $('#search-val').val().trim();
						if (search) {
							$('#configTab .tabs-item').removeClass('active');
							$('.panel-search').removeClass('hide');
							$('.panel-config:not(.alert-view-box)').removeClass('hide');
							$('.panel-config.alert-view-box').addClass('hide');
							$('.panel-config .configure-title').addClass('hide');
							$('.panel-config .configure-block>.line').addClass('hide');
							$('.panel-config .configure-block').css({ padding: '0' });
							_this.searchSetup(search);
						}
						else {
							_this.cateClick();
						}
					});
					this.$setCookie("ssl_config", "1");
					$('input[type="checkbox"]').on('change', function (ev) { return __awaiter(_this, void 0, void 0, function () {
						var el, _a, name, checked, status, config, _b, data, res, _c, rdata, error_17;
						var _this = this;
						return __generator(this, function (_d) {
							switch (_d.label) {
								case 0:
									el = $(ev.target);
									_a = ev.target, name = _a.name, checked = _a.checked;
									status = checked ? '开启' : '关闭';
									config = {
										title: '',
										msg: '',
										confirm: function () { },
									};
									_d.label = 1;
								case 1:
									_d.trys.push([1, 37, , 38]);
									_b = name;
									switch (_b) {
										case 'close_panel': return [3, 2];
										case 'ipv6': return [3, 3];
										case 'is_local': return [3, 5];
										case 'panel_safe': return [3, 6];
										case 'debug': return [3, 10];
										case 'api': return [3, 11];
										case 'show_workorder': return [3, 16];
										case 'improvement': return [3, 17];
										case 'ssl': return [3, 18];
										case 'basic_auth': return [3, 19];
										case 'check_two_step': return [3, 23];
										case 'ssl_verify': return [3, 28];
										case 'paw_complexity': return [3, 33];
									}
									return [3, 34];
								case 2:
									config = {
										title: lan.config.close_panel_title,
										msg: lan.config.close_panel_msg,
										confirm: function () { return __awaiter(_this, void 0, void 0, function () {
											return __generator(this, function (_a) {
												switch (_a.label) {
													case 0: return [4, this.$request('closePanel')];
													case 1:
														_a.sent();
														this.$refreshBrowser(1000);
														return [2];
												}
											});
										}); },
									};
									return [3, 34];
								case 3: return [4, this.$request('setIpv6Status')];
								case 4:
									_d.sent();
									$('input[name="ipv6"]').prop('checked', checked);
									return [3, 34];
								case 5:
									config = {
										title: "".concat(status, " \u79BB\u7EBF\u6A21\u5F0F"),
										msg: checked ? "".concat(status, " \u79BB\u7EBF\u6A21\u5F0F\u540E\u9762\u677F\u5C06\u505C\u6B62\u8FDE\u63A5\u4E91\u7AEF\uFF0C\u4ECB\u65F6\u8F6F\u4EF6\u5B89\u88C5\u3001\u5378\u8F7D\u3001\u9762\u677F\u66F4\u65B0\u7B49\u529F\u80FD\u5C06\u65E0\u6CD5\u4F7F\u7528\uFF0C\u662F\u5426\u7EE7\u7EED\uFF01") : "\u662F\u5426".concat(status, " \u79BB\u7EBF\u6A21\u5F0F\uFF0C\u7EE7\u7EED\u64CD\u4F5C\uFF01"),
										confirm: function () { return __awaiter(_this, void 0, void 0, function () {
											return __generator(this, function (_a) {
												this.$request('setLocal');
												this.$refreshBrowser(1000);
												return [2];
											});
										}); },
									};
									return [3, 34];
								case 6:
									if (!checked) return [3, 7];
									this.openPanelSafeAlertMethodView(true);
									return [3, 9];
								case 7:
									data = JSON.stringify({
										status: false,
										type: "panel_safe_push",
										title: "面板安全告警",
										module: this.Info.panel_safe.module,
										interval: 600
									});
									return [4, this.$request('setPanelSafe', {
										name: 'site_push',
										id: 'panel_safe_push',
										data: data
									})];
								case 8:
									res = _d.sent();
									res.status;
									_d.label = 9;
								case 9: return [3, 34];
								case 10:
									if (checked) {
										this.setDeveloperView();
									}
									else {
										config = {
											title: "".concat(status, " \u5F00\u53D1\u8005\u6A21\u5F0F"),
											msg: "\u662F\u5426".concat(status, " \u5F00\u53D1\u8005\u6A21\u5F0F\uFF0C\u7EE7\u7EED\u64CD\u4F5C\uFF01"),
											confirm: function () {
												_this.$request('setDebug');
											},
										};
									}
									return [3, 34];
								case 11:
									if (!checked) return [3, 13];
									return [4, this.setPanelApiView(checked)];
								case 12:
									_c = _d.sent();
									return [3, 15];
								case 13: return [4, this.$request('setToken', { t_type: 2 })];
								case 14:
									_c = _d.sent();
									_d.label = 15;
								case 15:
									_c;
									$('input[name="api"]').prop('checked', checked);
									return [3, 34];
								case 16:
									config = {
										title: "".concat(status, "\u5728\u7EBF\u5BA2\u670D"),
										msg: !checked ? "".concat(status, " \u5728\u7EBF\u5BA2\u670D\u540E\uFF0C\u5C06\u4E0D\u5728\u652F\u6301\u5728\u7EBF\u5BA2\u670D\u529F\u80FD\uFF0C\u7EE7\u7EED\u64CD\u4F5C\uFF1F") : "".concat(status, " \u5728\u7EBF\u5BA2\u670D\u540E\uFF0C\u53EF\u4EE5\u4F7F\u7528\u5728\u7EBF\u5BA2\u670D\u529F\u80FD\uFF0C\u5411\u5B9D\u5854\u6280\u672F\u4EBA\u5458\u53CD\u9988\u95EE\u9898\uFF0C\u7EE7\u7EED\u64CD\u4F5C"),
										confirm: function () { return __awaiter(_this, void 0, void 0, function () {
											return __generator(this, function (_a) {
												switch (_a.label) {
													case 0: return [4, this.$request('setWorkorder')];
													case 1:
														_a.sent();
														this.$refreshBrowser();
														return [2];
												}
											});
										}); },
									};
									return [3, 34];
								case 17:
									config = {
										title: "".concat(status, "\u7528\u6237\u4F53\u9A8C\u6539\u5584\u8BA1\u5212"),
										msg: checked ? "\u611F\u8C22\u60A8\u53C2\u4E0E\u7528\u6237\u6539\u5584\u8BA1\u5212\uFF0C\u5E2E\u52A9\u5B9D\u5854\u63D0\u5347\u4EA7\u54C1\u8D28\u91CF\uFF0C\u4F7F\u5F97\u6211\u4EEC\u6709\u673A\u4F1A\u4E3A\u60A8\u63D0\u4F9B\u66F4\u4F18\u8D28\u7684\u4EA7\u54C1\u548C\u670D\u52A1\uFF0C\u662F\u5426\u7EE7\u7EED\uFF1F" : "\u975E\u5E38\u611F\u8C22\u60A8\u5BF9\u6211\u4EEC\u7684\u652F\u6301\uFF0C\u5373\u5C06\u9000\u51FA\u7528\u6237\u4F53\u9A8C\u6539\u5584\u8BA1\u5212\uFF0C\u662F\u5426\u7EE7\u7EED\uFF1F",
										confirm: function () { return __awaiter(_this, void 0, void 0, function () {
											return __generator(this, function (_a) {
												switch (_a.label) {
													case 0: return [4, this.$request('setImprovement', { status: checked ? 1 : 0 })];
													case 1:
														_a.sent();
														return [2];
												}
											});
										}); },
									};
									return [3, 34];
								case 18:
									if (checked) {
										this.setPanelSslView();
									}
									else {
										if (this.configInfo.ssl_verify) {
											el.prop('checked', true);
											return [2, layer.msg('检测到当前面板已开启访问设备验证，请先关闭访问设备验证', { icon: 2 })];
										}
										bt.input_confirm({
											title: '关闭面板SSL',
											msg: '关闭SSL极易被抓包攻击导致账号密码泄露，请勿关闭',
											value: '我要关闭'
										}, function () { return __awaiter(_this, void 0, void 0, function () {
											var rdata;
											return __generator(this, function (_a) {
												switch (_a.label) {
													case 0: return [4, this.$request('setPanelSsl')];
													case 1:
														_a.sent();
														return [4, this.$request('restartPanel', false)];
													case 2:
														rdata = _a.sent();
														sessionStorage.clear(); // 清除sessionStorage
														localStorage.clear(); // 清除localStorage
														// 清除所有cookie
														const keys = document.cookie.match(/[^ =;]+(?=\=)/g);
														if (keys) {
															for (let i = keys.length; i--;) {
																document.cookie = keys[i] + '=0;expires=' + new Date(0).toUTCString();
															}
														}
														rdata.status && this.$refreshBrowser('http://' + location.host + location.pathname);
														return [2];
												}
											});
										}); });
									}
									return [3, 34];
								case 19:
									if (!checked) return [3, 21];
									return [4, this.setBasicAuthView()];
								case 20:
									_d.sent();
									return [3, 22];
								case 21:
									config = {
										title: "\u5173\u95EDBasicAuth\u8BA4\u8BC1",
										msg: "\u5173\u95EDBasicAuth\u8BA4\u8BC1\u540E\uFF0C\u9762\u677F\u767B\u5F55\u5C06\u4E0D\u518D\u9A8C\u8BC1BasicAuth\u57FA\u7840\u8BA4\u8BC1\uFF0C\u8FD9\u5C06\u4F1A\u5BFC\u81F4\u9762\u677F\u5B89\u5168\u6027\u4E0B\u964D\uFF0C\u7EE7\u7EED\u64CD\u4F5C\uFF01",
										confirm: function () { return __awaiter(_this, void 0, void 0, function () {
											var rdata;
											return __generator(this, function (_a) {
												switch (_a.label) {
													case 0: return [4, this.$request('setBasicAuth', {
														open: 'False',
														basic_user: '',
														basic_pwd: '',
													})];
													case 1:
														rdata = _a.sent();
														rdata.status && this.$refreshBrowser();
														return [2];
												}
											});
										}); },
									};
									_d.label = 22;
								case 22: return [3, 34];
								case 23:
									if (!checked) return [3, 25];
									return [4, this.setGoogleAuthView()];
								case 24:
									_d.sent();
									return [3, 27];
								case 25: return [4, this.$request('setTwoStepAuth', { act: 0 })];
								case 26:
									_d.sent();
									$('input[name="check_two_step"]').prop('checked', false);
									_d.label = 27;
								case 27: return [3, 34];
								case 28:
									if (!checked) return [3, 30];
									if (!this.configInfo.ssl) {
										el.prop('checked', !checked);
										return [2, this.$warning('请先开启面板SSL证书后重试')];
									}
									return [4, this.setAccessDeviceAuthView()];
								case 29:
									_d.sent();
									return [3, 32];
								case 30: return [4, this.$request('setSslVerify', { status: 0 })];
								case 31:
									rdata = _d.sent();
									rdata.status && this.$refreshBrowser();
									_d.label = 32;
								case 32: return [3, 34];
								case 33:
									config = {
										title: "".concat(status, " \u5BC6\u7801\u590D\u6742\u5EA6\u9A8C\u8BC1"),
										msg: "".concat(status).concat(!checked ? '密码复杂度后，密码登录将不再验证密码复杂度，这将会导致面板安全性下降' : '密码复杂度验证后，将会对密码进行复杂度判断，规则：<span style="color:red;">密码必须满足密码长度大于8位且大写字母、小写字母、数字、特殊字符至少3项组合</span>', "\uFF0C\u7EE7\u7EED\u64CD\u4F5C\uFF01"),
										confirm: function () { return __awaiter(_this, void 0, void 0, function () {
											var rdata;
											return __generator(this, function (_a) {
												switch (_a.label) {
													case 0: return [4, this.$request('setPasswordSafe')];
													case 1:
														rdata = _a.sent();
														rdata.status && this.$refreshBrowser();
														return [2];
												}
											});
										}); },
									};
									return [3, 34];
								case 34:
									if (!(config.title !== '')) return [3, 36];
									return [4, this.$confirm({ title: config.title, msg: config.msg })];
								case 35:
									_d.sent();
									config.confirm();
									_d.label = 36;
								case 36: return [3, 38];
								case 37:
									error_17 = _d.sent();
									if (typeof error_17.cancel === 'boolean' && error_17.cancel)
										el.prop('checked', !checked);
									return [3, 38];
								case 38: return [2];
							}
						});
					}); });
					$('input[type="text"]').on('input', function (ev) { return __awaiter(_this, void 0, void 0, function () {
						var el, value, oldValue, name;
						return __generator(this, function (_a) {
							el = $(ev.target);
							value = el.val();
							oldValue = el.attr('value');
							name = el.attr('name');
							value != oldValue ? el.parent().next().removeAttr('disabled') : el.parent().next().attr('disabled', 'disabled');
							this.configInfo[name] = value;
							return [2];
						});
					}); });
					$('.savePanelConfig').on('click', function (ev) { return __awaiter(_this, void 0, void 0, function () {
						var name, _a, webname, session_timeout, domain, limitip, sites_path, backup_path, address, systemdate, url, _b;
						return __generator(this, function (_c) {
							switch (_c.label) {
								case 0:
									name = $(ev.target).prev().find('input').attr('name');
									_a = this.configInfo, webname = _a.webname, session_timeout = _a.session_timeout, domain = _a.domain, limitip = _a.limitip, sites_path = _a.sites_path, backup_path = _a.backup_path, address = _a.address, systemdate = _a.systemdate;
									url = null;
									_b = name;
									switch (_b) {
										case 'address': return [3, 1];
									}
									return [3, 3];
								case 1: return [4, this.$confirm({
									title: "\u4FEE\u6539\u670D\u52A1\u5668IP",
									msg: "\u5F53\u524D\u670D\u52A1\u5668IP\uFF0C\u975E\u5FC5\u8981\u8BF7\u52FF\u4FEE\u6539\uFF0C\u9519\u8BEF\u7684IP\u5730\u5740\u53EF\u80FD\u4F1A\u5BFC\u81F4\u5F53\u524D\u9762\u677F\u90E8\u5206\u83B7\u53D6\u670D\u52A1\u5F02\u5E38\uFF0C\u662F\u5426\u7EE7\u7EED\uFF1F",
								})];
								case 2:
									_c.sent();
									return [3, 3];
								case 3: return [4, this.$request('setPanelConfig', {
									webname: webname,
									session_timeout: session_timeout,
									domain: domain,
									limitip: limitip,
									sites_path: sites_path,
									backup_path: backup_path,
									address: address,
									systemdate: systemdate,
								})];
								case 4:
									_c.sent();
									if (name === 'domain') {
										if (this.$checkDomain(domain)) {
											url = "".concat(location.protocol, "//").concat(domain, ":").concat(location.port).concat(location.pathname);
										}
										else if (domain === '') {
											url = "".concat(location.protocol, "//").concat(address, ":").concat(location.port).concat(location.pathname);
										}
									}
									if (url) {
										this.$refreshBrowser(url);
									}
									else {
										this.$refreshBrowser();
									}
									return [2];
							}
						});
					}); });
					$('.apiInterfaceBtn').on('click', function () { return _this.setPanelApiView(); });
					$('.syncDateBtn').on('click', function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
						switch (_a.label) {
							case 0: return [4, this.$request('setSyncDate')];
							case 1: return [2, (_a.sent()) && this.$refreshBrowser(1500)];
						}
					}); }); });
					$('.editPanelAccount').on('click', function () { return _this.setPanelUserView(); });
					$('.editPanelPassword').on('click', function () { return _this.setPanelPawView(); });
					$('.panelSafeAlertMethod').on('click', function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
						return [2, this.openPanelSafeAlertMethodView()];
					}); }); });
					$('.panelSslConfig').on('click', function () { return _this.setPanelSslConfigView(); });
					$('.basicAuthConfig').on('click', function () { return __awaiter(_this, void 0, void 0, function () {
						var _a;
						return __generator(this, function (_b) {
							switch (_b.label) {
								case 0:
									if (!this.configInfo.basic_auth) return [3, 2];
									return [4, this.setBasicAuthConfigView()];
								case 1:
									_a = _b.sent();
									return [3, 4];
								case 2: return [4, this.setBasicAuthView()];
								case 3:
									_a = _b.sent();
									_b.label = 4;
								case 4:
									_a;
									return [2];
							}
						});
					}); });
					$('.checkTwoStepConfig').on('click', function () { return _this.googleAuthRelationView(); });
					$('.sslVerifyConfig').on('click', function () { return _this.setAccessCertificateView(); });
					$('.setPanelPort').on('click', function () { return _this.setPanelPortView(); });
					$('.setSafetyEntrance').on('click', function () { return _this.setSafetyEntranceView(); });
					$('.setPawExpiration').on('click', function () { return _this.setPawExpirationView(); });
					$('.bindBtUser').on('click', function () { return _this.bindBtAccount(); });
					$('.unbindBtUser').on('click', function () { return _this.unbindUser(); });
					$('.menuBarManage').on('click', function () { return _this.setPanelGroundView(); });
					$('.sitesPath').on('click', function () { return _this.selectFileDir('[name="sites_path"]', 'dir', function () {
					}); });
					$('.backupPath').on('click', function () { return _this.selectFileDir('[name="backup_path"]', 'dir', function () {
					}); });
					$('.setStatusCodeView').on('click', function () { return _this.setStatusCodeView(); });
					$('.setTempAuthView').on('click', function () { return _this.setTempAuthView(); });
					$('.request_iptype').on('click', function () { return _this.setRequestIpTypeView(); });
					$('.request_type').on('click', function () { return _this.setRequestTypeView(); });
					$('.node_config').on('click', function () { return _this.setNodeConfigView(); });
					$('#addAlertTask').on('click', '.alertInstall', function (ev) {
						var _type = $(ev.currentTarget).parent('span').siblings('input').attr('name');
						_this.setAlertConfigType(_type);
					});
					$('.area-duoxuan').on('input', function () { return _this.reanderBanRegion(1); });
					setTimeout(function () {
						$.fn.serializeObject = function () {
							var hasOwnProperty = Object.prototype.hasOwnProperty;
							return this.serializeArray().reduce(function (data, pair) {
								if (!hasOwnProperty.call(data, pair.name)) {
									data[pair.name] = pair.value;
								}
								return data;
							}, {});
						};
					}, 300);
					return [2];
				});
			});
		};
		return Config;
	}(public_1.default));
	exports.Config = Config;
});
